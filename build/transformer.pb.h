// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transformer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transformer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transformer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transformer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transformer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
class DecoderLayer;
struct DecoderLayerDefaultTypeInternal;
extern DecoderLayerDefaultTypeInternal _DecoderLayer_default_instance_;
class EmbeddingLayer;
struct EmbeddingLayerDefaultTypeInternal;
extern EmbeddingLayerDefaultTypeInternal _EmbeddingLayer_default_instance_;
class EncoderLayer;
struct EncoderLayerDefaultTypeInternal;
extern EncoderLayerDefaultTypeInternal _EncoderLayer_default_instance_;
class ModelConf;
struct ModelConfDefaultTypeInternal;
extern ModelConfDefaultTypeInternal _ModelConf_default_instance_;
class Transformer;
struct TransformerDefaultTypeInternal;
extern TransformerDefaultTypeInternal _Transformer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DecoderLayer* Arena::CreateMaybeMessage<::DecoderLayer>(Arena*);
template<> ::EmbeddingLayer* Arena::CreateMaybeMessage<::EmbeddingLayer>(Arena*);
template<> ::EncoderLayer* Arena::CreateMaybeMessage<::EncoderLayer>(Arena*);
template<> ::ModelConf* Arena::CreateMaybeMessage<::ModelConf>(Arena*);
template<> ::Transformer* Arena::CreateMaybeMessage<::Transformer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EncoderLayer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:EncoderLayer) */ {
 public:
  inline EncoderLayer() : EncoderLayer(nullptr) {}
  ~EncoderLayer() override;
  explicit constexpr EncoderLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncoderLayer(const EncoderLayer& from);
  EncoderLayer(EncoderLayer&& from) noexcept
    : EncoderLayer() {
    *this = ::std::move(from);
  }

  inline EncoderLayer& operator=(const EncoderLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncoderLayer& operator=(EncoderLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EncoderLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncoderLayer* internal_default_instance() {
    return reinterpret_cast<const EncoderLayer*>(
               &_EncoderLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncoderLayer& a, EncoderLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(EncoderLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncoderLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncoderLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncoderLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncoderLayer& from);
  void MergeFrom(const EncoderLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncoderLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EncoderLayer";
  }
  protected:
  explicit EncoderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiheadNormScaleFieldNumber = 1,
    kMultiheadNormBiasFieldNumber = 2,
    kMultiheadProjectKernelQkvFieldNumber = 3,
    kMultiheadProjectBiasQkvFieldNumber = 4,
    kMultiheadProjectKernelOutputFieldNumber = 5,
    kMultiheadProjectBiasOutputFieldNumber = 6,
    kFfnNormScaleFieldNumber = 7,
    kFfnNormBiasFieldNumber = 8,
    kFfnFirstKernelFieldNumber = 9,
    kFfnFirstBiasFieldNumber = 10,
    kFfnSecondKernelFieldNumber = 11,
    kFfnSecondBiasFieldNumber = 12,
  };
  // repeated float multihead_norm_scale = 1;
  int multihead_norm_scale_size() const;
  private:
  int _internal_multihead_norm_scale_size() const;
  public:
  void clear_multihead_norm_scale();
  private:
  float _internal_multihead_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_norm_scale() const;
  void _internal_add_multihead_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_norm_scale();
  public:
  float multihead_norm_scale(int index) const;
  void set_multihead_norm_scale(int index, float value);
  void add_multihead_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_norm_scale();

  // repeated float multihead_norm_bias = 2;
  int multihead_norm_bias_size() const;
  private:
  int _internal_multihead_norm_bias_size() const;
  public:
  void clear_multihead_norm_bias();
  private:
  float _internal_multihead_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_norm_bias() const;
  void _internal_add_multihead_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_norm_bias();
  public:
  float multihead_norm_bias(int index) const;
  void set_multihead_norm_bias(int index, float value);
  void add_multihead_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_norm_bias();

  // repeated float multihead_project_kernel_qkv = 3;
  int multihead_project_kernel_qkv_size() const;
  private:
  int _internal_multihead_project_kernel_qkv_size() const;
  public:
  void clear_multihead_project_kernel_qkv();
  private:
  float _internal_multihead_project_kernel_qkv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_project_kernel_qkv() const;
  void _internal_add_multihead_project_kernel_qkv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_project_kernel_qkv();
  public:
  float multihead_project_kernel_qkv(int index) const;
  void set_multihead_project_kernel_qkv(int index, float value);
  void add_multihead_project_kernel_qkv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_project_kernel_qkv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_project_kernel_qkv();

  // repeated float multihead_project_bias_qkv = 4;
  int multihead_project_bias_qkv_size() const;
  private:
  int _internal_multihead_project_bias_qkv_size() const;
  public:
  void clear_multihead_project_bias_qkv();
  private:
  float _internal_multihead_project_bias_qkv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_project_bias_qkv() const;
  void _internal_add_multihead_project_bias_qkv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_project_bias_qkv();
  public:
  float multihead_project_bias_qkv(int index) const;
  void set_multihead_project_bias_qkv(int index, float value);
  void add_multihead_project_bias_qkv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_project_bias_qkv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_project_bias_qkv();

  // repeated float multihead_project_kernel_output = 5;
  int multihead_project_kernel_output_size() const;
  private:
  int _internal_multihead_project_kernel_output_size() const;
  public:
  void clear_multihead_project_kernel_output();
  private:
  float _internal_multihead_project_kernel_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_project_kernel_output() const;
  void _internal_add_multihead_project_kernel_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_project_kernel_output();
  public:
  float multihead_project_kernel_output(int index) const;
  void set_multihead_project_kernel_output(int index, float value);
  void add_multihead_project_kernel_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_project_kernel_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_project_kernel_output();

  // repeated float multihead_project_bias_output = 6;
  int multihead_project_bias_output_size() const;
  private:
  int _internal_multihead_project_bias_output_size() const;
  public:
  void clear_multihead_project_bias_output();
  private:
  float _internal_multihead_project_bias_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_project_bias_output() const;
  void _internal_add_multihead_project_bias_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_project_bias_output();
  public:
  float multihead_project_bias_output(int index) const;
  void set_multihead_project_bias_output(int index, float value);
  void add_multihead_project_bias_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_project_bias_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_project_bias_output();

  // repeated float ffn_norm_scale = 7;
  int ffn_norm_scale_size() const;
  private:
  int _internal_ffn_norm_scale_size() const;
  public:
  void clear_ffn_norm_scale();
  private:
  float _internal_ffn_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_scale() const;
  void _internal_add_ffn_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_scale();
  public:
  float ffn_norm_scale(int index) const;
  void set_ffn_norm_scale(int index, float value);
  void add_ffn_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_scale();

  // repeated float ffn_norm_bias = 8;
  int ffn_norm_bias_size() const;
  private:
  int _internal_ffn_norm_bias_size() const;
  public:
  void clear_ffn_norm_bias();
  private:
  float _internal_ffn_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_bias() const;
  void _internal_add_ffn_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_bias();
  public:
  float ffn_norm_bias(int index) const;
  void set_ffn_norm_bias(int index, float value);
  void add_ffn_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_bias();

  // repeated float ffn_first_kernel = 9;
  int ffn_first_kernel_size() const;
  private:
  int _internal_ffn_first_kernel_size() const;
  public:
  void clear_ffn_first_kernel();
  private:
  float _internal_ffn_first_kernel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_first_kernel() const;
  void _internal_add_ffn_first_kernel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_first_kernel();
  public:
  float ffn_first_kernel(int index) const;
  void set_ffn_first_kernel(int index, float value);
  void add_ffn_first_kernel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_first_kernel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_first_kernel();

  // repeated float ffn_first_bias = 10;
  int ffn_first_bias_size() const;
  private:
  int _internal_ffn_first_bias_size() const;
  public:
  void clear_ffn_first_bias();
  private:
  float _internal_ffn_first_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_first_bias() const;
  void _internal_add_ffn_first_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_first_bias();
  public:
  float ffn_first_bias(int index) const;
  void set_ffn_first_bias(int index, float value);
  void add_ffn_first_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_first_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_first_bias();

  // repeated float ffn_second_kernel = 11;
  int ffn_second_kernel_size() const;
  private:
  int _internal_ffn_second_kernel_size() const;
  public:
  void clear_ffn_second_kernel();
  private:
  float _internal_ffn_second_kernel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_second_kernel() const;
  void _internal_add_ffn_second_kernel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_second_kernel();
  public:
  float ffn_second_kernel(int index) const;
  void set_ffn_second_kernel(int index, float value);
  void add_ffn_second_kernel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_second_kernel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_second_kernel();

  // repeated float ffn_second_bias = 12;
  int ffn_second_bias_size() const;
  private:
  int _internal_ffn_second_bias_size() const;
  public:
  void clear_ffn_second_bias();
  private:
  float _internal_ffn_second_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_second_bias() const;
  void _internal_add_ffn_second_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_second_bias();
  public:
  float ffn_second_bias(int index) const;
  void set_ffn_second_bias(int index, float value);
  void add_ffn_second_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_second_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_second_bias();

  // @@protoc_insertion_point(class_scope:EncoderLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_norm_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_norm_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_project_kernel_qkv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_project_bias_qkv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_project_kernel_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_project_bias_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_first_kernel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_first_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_second_kernel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_second_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transformer_2eproto;
};
// -------------------------------------------------------------------

class DecoderLayer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:DecoderLayer) */ {
 public:
  inline DecoderLayer() : DecoderLayer(nullptr) {}
  ~DecoderLayer() override;
  explicit constexpr DecoderLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecoderLayer(const DecoderLayer& from);
  DecoderLayer(DecoderLayer&& from) noexcept
    : DecoderLayer() {
    *this = ::std::move(from);
  }

  inline DecoderLayer& operator=(const DecoderLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecoderLayer& operator=(DecoderLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DecoderLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecoderLayer* internal_default_instance() {
    return reinterpret_cast<const DecoderLayer*>(
               &_DecoderLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DecoderLayer& a, DecoderLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DecoderLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecoderLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecoderLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecoderLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DecoderLayer& from);
  void MergeFrom(const DecoderLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DecoderLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DecoderLayer";
  }
  protected:
  explicit DecoderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNormScaleFieldNumber = 1,
    kSelfNormBiasFieldNumber = 2,
    kSelfProjectKernelQkvFieldNumber = 3,
    kSelfProjectBiasQkvFieldNumber = 4,
    kSelfProjectKernelOutputFieldNumber = 5,
    kSelfProjectBiasOutputFieldNumber = 6,
    kEncdecNormScaleFieldNumber = 7,
    kEncdecNormBiasFieldNumber = 8,
    kEncdecProjectKernelQFieldNumber = 9,
    kEncdecProjectBiasQFieldNumber = 10,
    kEncdecProjectKernelOutputFieldNumber = 11,
    kEncdecProjectBiasOutputFieldNumber = 12,
    kFfnNormScaleFieldNumber = 13,
    kFfnNormBiasFieldNumber = 14,
    kFfnFirstKernelFieldNumber = 15,
    kFfnFirstBiasFieldNumber = 16,
    kFfnSecondKernelFieldNumber = 17,
    kFfnSecondBiasFieldNumber = 18,
  };
  // repeated float self_norm_scale = 1;
  int self_norm_scale_size() const;
  private:
  int _internal_self_norm_scale_size() const;
  public:
  void clear_self_norm_scale();
  private:
  float _internal_self_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_norm_scale() const;
  void _internal_add_self_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_norm_scale();
  public:
  float self_norm_scale(int index) const;
  void set_self_norm_scale(int index, float value);
  void add_self_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_norm_scale();

  // repeated float self_norm_bias = 2;
  int self_norm_bias_size() const;
  private:
  int _internal_self_norm_bias_size() const;
  public:
  void clear_self_norm_bias();
  private:
  float _internal_self_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_norm_bias() const;
  void _internal_add_self_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_norm_bias();
  public:
  float self_norm_bias(int index) const;
  void set_self_norm_bias(int index, float value);
  void add_self_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_norm_bias();

  // repeated float self_project_kernel_qkv = 3;
  int self_project_kernel_qkv_size() const;
  private:
  int _internal_self_project_kernel_qkv_size() const;
  public:
  void clear_self_project_kernel_qkv();
  private:
  float _internal_self_project_kernel_qkv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_project_kernel_qkv() const;
  void _internal_add_self_project_kernel_qkv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_project_kernel_qkv();
  public:
  float self_project_kernel_qkv(int index) const;
  void set_self_project_kernel_qkv(int index, float value);
  void add_self_project_kernel_qkv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_project_kernel_qkv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_project_kernel_qkv();

  // repeated float self_project_bias_qkv = 4;
  int self_project_bias_qkv_size() const;
  private:
  int _internal_self_project_bias_qkv_size() const;
  public:
  void clear_self_project_bias_qkv();
  private:
  float _internal_self_project_bias_qkv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_project_bias_qkv() const;
  void _internal_add_self_project_bias_qkv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_project_bias_qkv();
  public:
  float self_project_bias_qkv(int index) const;
  void set_self_project_bias_qkv(int index, float value);
  void add_self_project_bias_qkv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_project_bias_qkv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_project_bias_qkv();

  // repeated float self_project_kernel_output = 5;
  int self_project_kernel_output_size() const;
  private:
  int _internal_self_project_kernel_output_size() const;
  public:
  void clear_self_project_kernel_output();
  private:
  float _internal_self_project_kernel_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_project_kernel_output() const;
  void _internal_add_self_project_kernel_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_project_kernel_output();
  public:
  float self_project_kernel_output(int index) const;
  void set_self_project_kernel_output(int index, float value);
  void add_self_project_kernel_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_project_kernel_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_project_kernel_output();

  // repeated float self_project_bias_output = 6;
  int self_project_bias_output_size() const;
  private:
  int _internal_self_project_bias_output_size() const;
  public:
  void clear_self_project_bias_output();
  private:
  float _internal_self_project_bias_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_project_bias_output() const;
  void _internal_add_self_project_bias_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_project_bias_output();
  public:
  float self_project_bias_output(int index) const;
  void set_self_project_bias_output(int index, float value);
  void add_self_project_bias_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_project_bias_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_project_bias_output();

  // repeated float encdec_norm_scale = 7;
  int encdec_norm_scale_size() const;
  private:
  int _internal_encdec_norm_scale_size() const;
  public:
  void clear_encdec_norm_scale();
  private:
  float _internal_encdec_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_norm_scale() const;
  void _internal_add_encdec_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_norm_scale();
  public:
  float encdec_norm_scale(int index) const;
  void set_encdec_norm_scale(int index, float value);
  void add_encdec_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_norm_scale();

  // repeated float encdec_norm_bias = 8;
  int encdec_norm_bias_size() const;
  private:
  int _internal_encdec_norm_bias_size() const;
  public:
  void clear_encdec_norm_bias();
  private:
  float _internal_encdec_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_norm_bias() const;
  void _internal_add_encdec_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_norm_bias();
  public:
  float encdec_norm_bias(int index) const;
  void set_encdec_norm_bias(int index, float value);
  void add_encdec_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_norm_bias();

  // repeated float encdec_project_kernel_q = 9;
  int encdec_project_kernel_q_size() const;
  private:
  int _internal_encdec_project_kernel_q_size() const;
  public:
  void clear_encdec_project_kernel_q();
  private:
  float _internal_encdec_project_kernel_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_project_kernel_q() const;
  void _internal_add_encdec_project_kernel_q(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_project_kernel_q();
  public:
  float encdec_project_kernel_q(int index) const;
  void set_encdec_project_kernel_q(int index, float value);
  void add_encdec_project_kernel_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_project_kernel_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_project_kernel_q();

  // repeated float encdec_project_bias_q = 10;
  int encdec_project_bias_q_size() const;
  private:
  int _internal_encdec_project_bias_q_size() const;
  public:
  void clear_encdec_project_bias_q();
  private:
  float _internal_encdec_project_bias_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_project_bias_q() const;
  void _internal_add_encdec_project_bias_q(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_project_bias_q();
  public:
  float encdec_project_bias_q(int index) const;
  void set_encdec_project_bias_q(int index, float value);
  void add_encdec_project_bias_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_project_bias_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_project_bias_q();

  // repeated float encdec_project_kernel_output = 11;
  int encdec_project_kernel_output_size() const;
  private:
  int _internal_encdec_project_kernel_output_size() const;
  public:
  void clear_encdec_project_kernel_output();
  private:
  float _internal_encdec_project_kernel_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_project_kernel_output() const;
  void _internal_add_encdec_project_kernel_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_project_kernel_output();
  public:
  float encdec_project_kernel_output(int index) const;
  void set_encdec_project_kernel_output(int index, float value);
  void add_encdec_project_kernel_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_project_kernel_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_project_kernel_output();

  // repeated float encdec_project_bias_output = 12;
  int encdec_project_bias_output_size() const;
  private:
  int _internal_encdec_project_bias_output_size() const;
  public:
  void clear_encdec_project_bias_output();
  private:
  float _internal_encdec_project_bias_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_project_bias_output() const;
  void _internal_add_encdec_project_bias_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_project_bias_output();
  public:
  float encdec_project_bias_output(int index) const;
  void set_encdec_project_bias_output(int index, float value);
  void add_encdec_project_bias_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_project_bias_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_project_bias_output();

  // repeated float ffn_norm_scale = 13;
  int ffn_norm_scale_size() const;
  private:
  int _internal_ffn_norm_scale_size() const;
  public:
  void clear_ffn_norm_scale();
  private:
  float _internal_ffn_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_scale() const;
  void _internal_add_ffn_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_scale();
  public:
  float ffn_norm_scale(int index) const;
  void set_ffn_norm_scale(int index, float value);
  void add_ffn_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_scale();

  // repeated float ffn_norm_bias = 14;
  int ffn_norm_bias_size() const;
  private:
  int _internal_ffn_norm_bias_size() const;
  public:
  void clear_ffn_norm_bias();
  private:
  float _internal_ffn_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_bias() const;
  void _internal_add_ffn_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_bias();
  public:
  float ffn_norm_bias(int index) const;
  void set_ffn_norm_bias(int index, float value);
  void add_ffn_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_bias();

  // repeated float ffn_first_kernel = 15;
  int ffn_first_kernel_size() const;
  private:
  int _internal_ffn_first_kernel_size() const;
  public:
  void clear_ffn_first_kernel();
  private:
  float _internal_ffn_first_kernel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_first_kernel() const;
  void _internal_add_ffn_first_kernel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_first_kernel();
  public:
  float ffn_first_kernel(int index) const;
  void set_ffn_first_kernel(int index, float value);
  void add_ffn_first_kernel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_first_kernel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_first_kernel();

  // repeated float ffn_first_bias = 16;
  int ffn_first_bias_size() const;
  private:
  int _internal_ffn_first_bias_size() const;
  public:
  void clear_ffn_first_bias();
  private:
  float _internal_ffn_first_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_first_bias() const;
  void _internal_add_ffn_first_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_first_bias();
  public:
  float ffn_first_bias(int index) const;
  void set_ffn_first_bias(int index, float value);
  void add_ffn_first_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_first_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_first_bias();

  // repeated float ffn_second_kernel = 17;
  int ffn_second_kernel_size() const;
  private:
  int _internal_ffn_second_kernel_size() const;
  public:
  void clear_ffn_second_kernel();
  private:
  float _internal_ffn_second_kernel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_second_kernel() const;
  void _internal_add_ffn_second_kernel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_second_kernel();
  public:
  float ffn_second_kernel(int index) const;
  void set_ffn_second_kernel(int index, float value);
  void add_ffn_second_kernel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_second_kernel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_second_kernel();

  // repeated float ffn_second_bias = 18;
  int ffn_second_bias_size() const;
  private:
  int _internal_ffn_second_bias_size() const;
  public:
  void clear_ffn_second_bias();
  private:
  float _internal_ffn_second_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_second_bias() const;
  void _internal_add_ffn_second_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_second_bias();
  public:
  float ffn_second_bias(int index) const;
  void set_ffn_second_bias(int index, float value);
  void add_ffn_second_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_second_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_second_bias();

  // @@protoc_insertion_point(class_scope:DecoderLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_norm_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_norm_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_project_kernel_qkv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_project_bias_qkv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_project_kernel_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_project_bias_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_norm_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_norm_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_project_kernel_q_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_project_bias_q_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_project_kernel_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_project_bias_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_first_kernel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_first_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_second_kernel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_second_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transformer_2eproto;
};
// -------------------------------------------------------------------

class EmbeddingLayer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:EmbeddingLayer) */ {
 public:
  inline EmbeddingLayer() : EmbeddingLayer(nullptr) {}
  ~EmbeddingLayer() override;
  explicit constexpr EmbeddingLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbeddingLayer(const EmbeddingLayer& from);
  EmbeddingLayer(EmbeddingLayer&& from) noexcept
    : EmbeddingLayer() {
    *this = ::std::move(from);
  }

  inline EmbeddingLayer& operator=(const EmbeddingLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbeddingLayer& operator=(EmbeddingLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EmbeddingLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbeddingLayer* internal_default_instance() {
    return reinterpret_cast<const EmbeddingLayer*>(
               &_EmbeddingLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmbeddingLayer& a, EmbeddingLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbeddingLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbeddingLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbeddingLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbeddingLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EmbeddingLayer& from);
  void MergeFrom(const EmbeddingLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmbeddingLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EmbeddingLayer";
  }
  protected:
  explicit EmbeddingLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenEmbeddingFieldNumber = 1,
    kPositionEmbeddingFieldNumber = 2,
    kNormScaleFieldNumber = 3,
    kNormBiasFieldNumber = 4,
    kEncodeOutputProjectKernelKvFieldNumber = 5,
    kEncodeOutputProjectBiasKvFieldNumber = 6,
    kSharedBiasFieldNumber = 7,
    kLangEmbFieldNumber = 8,
  };
  // repeated float token_embedding = 1;
  int token_embedding_size() const;
  private:
  int _internal_token_embedding_size() const;
  public:
  void clear_token_embedding();
  private:
  float _internal_token_embedding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_token_embedding() const;
  void _internal_add_token_embedding(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_token_embedding();
  public:
  float token_embedding(int index) const;
  void set_token_embedding(int index, float value);
  void add_token_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      token_embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_token_embedding();

  // repeated float position_embedding = 2;
  int position_embedding_size() const;
  private:
  int _internal_position_embedding_size() const;
  public:
  void clear_position_embedding();
  private:
  float _internal_position_embedding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position_embedding() const;
  void _internal_add_position_embedding(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position_embedding();
  public:
  float position_embedding(int index) const;
  void set_position_embedding(int index, float value);
  void add_position_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position_embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position_embedding();

  // repeated float norm_scale = 3;
  int norm_scale_size() const;
  private:
  int _internal_norm_scale_size() const;
  public:
  void clear_norm_scale();
  private:
  float _internal_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_norm_scale() const;
  void _internal_add_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_norm_scale();
  public:
  float norm_scale(int index) const;
  void set_norm_scale(int index, float value);
  void add_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_norm_scale();

  // repeated float norm_bias = 4;
  int norm_bias_size() const;
  private:
  int _internal_norm_bias_size() const;
  public:
  void clear_norm_bias();
  private:
  float _internal_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_norm_bias() const;
  void _internal_add_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_norm_bias();
  public:
  float norm_bias(int index) const;
  void set_norm_bias(int index, float value);
  void add_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_norm_bias();

  // repeated float encode_output_project_kernel_kv = 5;
  int encode_output_project_kernel_kv_size() const;
  private:
  int _internal_encode_output_project_kernel_kv_size() const;
  public:
  void clear_encode_output_project_kernel_kv();
  private:
  float _internal_encode_output_project_kernel_kv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encode_output_project_kernel_kv() const;
  void _internal_add_encode_output_project_kernel_kv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encode_output_project_kernel_kv();
  public:
  float encode_output_project_kernel_kv(int index) const;
  void set_encode_output_project_kernel_kv(int index, float value);
  void add_encode_output_project_kernel_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encode_output_project_kernel_kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encode_output_project_kernel_kv();

  // repeated float encode_output_project_bias_kv = 6;
  int encode_output_project_bias_kv_size() const;
  private:
  int _internal_encode_output_project_bias_kv_size() const;
  public:
  void clear_encode_output_project_bias_kv();
  private:
  float _internal_encode_output_project_bias_kv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encode_output_project_bias_kv() const;
  void _internal_add_encode_output_project_bias_kv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encode_output_project_bias_kv();
  public:
  float encode_output_project_bias_kv(int index) const;
  void set_encode_output_project_bias_kv(int index, float value);
  void add_encode_output_project_bias_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encode_output_project_bias_kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encode_output_project_bias_kv();

  // repeated float shared_bias = 7;
  int shared_bias_size() const;
  private:
  int _internal_shared_bias_size() const;
  public:
  void clear_shared_bias();
  private:
  float _internal_shared_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_shared_bias() const;
  void _internal_add_shared_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_shared_bias();
  public:
  float shared_bias(int index) const;
  void set_shared_bias(int index, float value);
  void add_shared_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      shared_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_shared_bias();

  // repeated float lang_emb = 8;
  int lang_emb_size() const;
  private:
  int _internal_lang_emb_size() const;
  public:
  void clear_lang_emb();
  private:
  float _internal_lang_emb(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_lang_emb() const;
  void _internal_add_lang_emb(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_lang_emb();
  public:
  float lang_emb(int index) const;
  void set_lang_emb(int index, float value);
  void add_lang_emb(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lang_emb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lang_emb();

  // @@protoc_insertion_point(class_scope:EmbeddingLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > token_embedding_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_embedding_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > norm_scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > norm_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encode_output_project_kernel_kv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encode_output_project_bias_kv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > shared_bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lang_emb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transformer_2eproto;
};
// -------------------------------------------------------------------

class ModelConf final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ModelConf) */ {
 public:
  inline ModelConf() : ModelConf(nullptr) {}
  ~ModelConf() override;
  explicit constexpr ModelConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConf(const ModelConf& from);
  ModelConf(ModelConf&& from) noexcept
    : ModelConf() {
    *this = ::std::move(from);
  }

  inline ModelConf& operator=(const ModelConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConf& operator=(ModelConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ModelConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelConf* internal_default_instance() {
    return reinterpret_cast<const ModelConf*>(
               &_ModelConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelConf& a, ModelConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelConf>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModelConf& from);
  void MergeFrom(const ModelConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelConf";
  }
  protected:
  explicit ModelConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingMethodFieldNumber = 8,
    kHeadNumFieldNumber = 1,
    kBeamSizeFieldNumber = 2,
    kExtraDecodeLengthFieldNumber = 3,
    kLengthPenaltyFieldNumber = 4,
    kSrcPaddingIdFieldNumber = 5,
    kTrgStartIdFieldNumber = 6,
    kDiverseLambdaFieldNumber = 7,
    kToppFieldNumber = 9,
    kTopkFieldNumber = 10,
    kTrgEndIdFieldNumber = 11,
    kIsPostLnFieldNumber = 12,
    kNoScaleEmbeddingFieldNumber = 13,
    kUseGeluFieldNumber = 14,
    kMultilgTypeFieldNumber = 15,
  };
  // string sampling_method = 8;
  void clear_sampling_method();
  const std::string& sampling_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sampling_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sampling_method();
  PROTOBUF_NODISCARD std::string* release_sampling_method();
  void set_allocated_sampling_method(std::string* sampling_method);
  private:
  const std::string& _internal_sampling_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sampling_method(const std::string& value);
  std::string* _internal_mutable_sampling_method();
  public:

  // int32 head_num = 1;
  void clear_head_num();
  int32_t head_num() const;
  void set_head_num(int32_t value);
  private:
  int32_t _internal_head_num() const;
  void _internal_set_head_num(int32_t value);
  public:

  // int32 beam_size = 2;
  void clear_beam_size();
  int32_t beam_size() const;
  void set_beam_size(int32_t value);
  private:
  int32_t _internal_beam_size() const;
  void _internal_set_beam_size(int32_t value);
  public:

  // int32 extra_decode_length = 3;
  void clear_extra_decode_length();
  int32_t extra_decode_length() const;
  void set_extra_decode_length(int32_t value);
  private:
  int32_t _internal_extra_decode_length() const;
  void _internal_set_extra_decode_length(int32_t value);
  public:

  // float length_penalty = 4;
  void clear_length_penalty();
  float length_penalty() const;
  void set_length_penalty(float value);
  private:
  float _internal_length_penalty() const;
  void _internal_set_length_penalty(float value);
  public:

  // int32 src_padding_id = 5;
  void clear_src_padding_id();
  int32_t src_padding_id() const;
  void set_src_padding_id(int32_t value);
  private:
  int32_t _internal_src_padding_id() const;
  void _internal_set_src_padding_id(int32_t value);
  public:

  // int32 trg_start_id = 6;
  void clear_trg_start_id();
  int32_t trg_start_id() const;
  void set_trg_start_id(int32_t value);
  private:
  int32_t _internal_trg_start_id() const;
  void _internal_set_trg_start_id(int32_t value);
  public:

  // float diverse_lambda = 7;
  void clear_diverse_lambda();
  float diverse_lambda() const;
  void set_diverse_lambda(float value);
  private:
  float _internal_diverse_lambda() const;
  void _internal_set_diverse_lambda(float value);
  public:

  // float topp = 9;
  void clear_topp();
  float topp() const;
  void set_topp(float value);
  private:
  float _internal_topp() const;
  void _internal_set_topp(float value);
  public:

  // int32 topk = 10;
  void clear_topk();
  int32_t topk() const;
  void set_topk(int32_t value);
  private:
  int32_t _internal_topk() const;
  void _internal_set_topk(int32_t value);
  public:

  // int32 trg_end_id = 11;
  void clear_trg_end_id();
  int32_t trg_end_id() const;
  void set_trg_end_id(int32_t value);
  private:
  int32_t _internal_trg_end_id() const;
  void _internal_set_trg_end_id(int32_t value);
  public:

  // bool is_post_ln = 12;
  void clear_is_post_ln();
  bool is_post_ln() const;
  void set_is_post_ln(bool value);
  private:
  bool _internal_is_post_ln() const;
  void _internal_set_is_post_ln(bool value);
  public:

  // bool no_scale_embedding = 13;
  void clear_no_scale_embedding();
  bool no_scale_embedding() const;
  void set_no_scale_embedding(bool value);
  private:
  bool _internal_no_scale_embedding() const;
  void _internal_set_no_scale_embedding(bool value);
  public:

  // bool use_gelu = 14;
  void clear_use_gelu();
  bool use_gelu() const;
  void set_use_gelu(bool value);
  private:
  bool _internal_use_gelu() const;
  void _internal_set_use_gelu(bool value);
  public:

  // int32 multilg_type = 15;
  void clear_multilg_type();
  int32_t multilg_type() const;
  void set_multilg_type(int32_t value);
  private:
  int32_t _internal_multilg_type() const;
  void _internal_set_multilg_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ModelConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sampling_method_;
  int32_t head_num_;
  int32_t beam_size_;
  int32_t extra_decode_length_;
  float length_penalty_;
  int32_t src_padding_id_;
  int32_t trg_start_id_;
  float diverse_lambda_;
  float topp_;
  int32_t topk_;
  int32_t trg_end_id_;
  bool is_post_ln_;
  bool no_scale_embedding_;
  bool use_gelu_;
  int32_t multilg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transformer_2eproto;
};
// -------------------------------------------------------------------

class Transformer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Transformer) */ {
 public:
  inline Transformer() : Transformer(nullptr) {}
  ~Transformer() override;
  explicit constexpr Transformer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transformer(const Transformer& from);
  Transformer(Transformer&& from) noexcept
    : Transformer() {
    *this = ::std::move(from);
  }

  inline Transformer& operator=(const Transformer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transformer& operator=(Transformer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Transformer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transformer* internal_default_instance() {
    return reinterpret_cast<const Transformer*>(
               &_Transformer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transformer& a, Transformer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transformer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transformer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transformer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transformer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transformer& from);
  void MergeFrom(const Transformer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transformer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Transformer";
  }
  protected:
  explicit Transformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncoderStackFieldNumber = 2,
    kDecoderStackFieldNumber = 4,
    kSrcEmbeddingFieldNumber = 1,
    kTrgEmbeddingFieldNumber = 3,
    kModelConfFieldNumber = 5,
  };
  // repeated .EncoderLayer encoder_stack = 2;
  int encoder_stack_size() const;
  private:
  int _internal_encoder_stack_size() const;
  public:
  void clear_encoder_stack();
  ::EncoderLayer* mutable_encoder_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EncoderLayer >*
      mutable_encoder_stack();
  private:
  const ::EncoderLayer& _internal_encoder_stack(int index) const;
  ::EncoderLayer* _internal_add_encoder_stack();
  public:
  const ::EncoderLayer& encoder_stack(int index) const;
  ::EncoderLayer* add_encoder_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EncoderLayer >&
      encoder_stack() const;

  // repeated .DecoderLayer decoder_stack = 4;
  int decoder_stack_size() const;
  private:
  int _internal_decoder_stack_size() const;
  public:
  void clear_decoder_stack();
  ::DecoderLayer* mutable_decoder_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DecoderLayer >*
      mutable_decoder_stack();
  private:
  const ::DecoderLayer& _internal_decoder_stack(int index) const;
  ::DecoderLayer* _internal_add_decoder_stack();
  public:
  const ::DecoderLayer& decoder_stack(int index) const;
  ::DecoderLayer* add_decoder_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DecoderLayer >&
      decoder_stack() const;

  // .EmbeddingLayer src_embedding = 1;
  bool has_src_embedding() const;
  private:
  bool _internal_has_src_embedding() const;
  public:
  void clear_src_embedding();
  const ::EmbeddingLayer& src_embedding() const;
  PROTOBUF_NODISCARD ::EmbeddingLayer* release_src_embedding();
  ::EmbeddingLayer* mutable_src_embedding();
  void set_allocated_src_embedding(::EmbeddingLayer* src_embedding);
  private:
  const ::EmbeddingLayer& _internal_src_embedding() const;
  ::EmbeddingLayer* _internal_mutable_src_embedding();
  public:
  void unsafe_arena_set_allocated_src_embedding(
      ::EmbeddingLayer* src_embedding);
  ::EmbeddingLayer* unsafe_arena_release_src_embedding();

  // .EmbeddingLayer trg_embedding = 3;
  bool has_trg_embedding() const;
  private:
  bool _internal_has_trg_embedding() const;
  public:
  void clear_trg_embedding();
  const ::EmbeddingLayer& trg_embedding() const;
  PROTOBUF_NODISCARD ::EmbeddingLayer* release_trg_embedding();
  ::EmbeddingLayer* mutable_trg_embedding();
  void set_allocated_trg_embedding(::EmbeddingLayer* trg_embedding);
  private:
  const ::EmbeddingLayer& _internal_trg_embedding() const;
  ::EmbeddingLayer* _internal_mutable_trg_embedding();
  public:
  void unsafe_arena_set_allocated_trg_embedding(
      ::EmbeddingLayer* trg_embedding);
  ::EmbeddingLayer* unsafe_arena_release_trg_embedding();

  // .ModelConf model_conf = 5;
  bool has_model_conf() const;
  private:
  bool _internal_has_model_conf() const;
  public:
  void clear_model_conf();
  const ::ModelConf& model_conf() const;
  PROTOBUF_NODISCARD ::ModelConf* release_model_conf();
  ::ModelConf* mutable_model_conf();
  void set_allocated_model_conf(::ModelConf* model_conf);
  private:
  const ::ModelConf& _internal_model_conf() const;
  ::ModelConf* _internal_mutable_model_conf();
  public:
  void unsafe_arena_set_allocated_model_conf(
      ::ModelConf* model_conf);
  ::ModelConf* unsafe_arena_release_model_conf();

  // @@protoc_insertion_point(class_scope:Transformer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EncoderLayer > encoder_stack_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DecoderLayer > decoder_stack_;
  ::EmbeddingLayer* src_embedding_;
  ::EmbeddingLayer* trg_embedding_;
  ::ModelConf* model_conf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transformer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncoderLayer

// repeated float multihead_norm_scale = 1;
inline int EncoderLayer::_internal_multihead_norm_scale_size() const {
  return multihead_norm_scale_.size();
}
inline int EncoderLayer::multihead_norm_scale_size() const {
  return _internal_multihead_norm_scale_size();
}
inline void EncoderLayer::clear_multihead_norm_scale() {
  multihead_norm_scale_.Clear();
}
inline float EncoderLayer::_internal_multihead_norm_scale(int index) const {
  return multihead_norm_scale_.Get(index);
}
inline float EncoderLayer::multihead_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.multihead_norm_scale)
  return _internal_multihead_norm_scale(index);
}
inline void EncoderLayer::set_multihead_norm_scale(int index, float value) {
  multihead_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.multihead_norm_scale)
}
inline void EncoderLayer::_internal_add_multihead_norm_scale(float value) {
  multihead_norm_scale_.Add(value);
}
inline void EncoderLayer::add_multihead_norm_scale(float value) {
  _internal_add_multihead_norm_scale(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.multihead_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_multihead_norm_scale() const {
  return multihead_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::multihead_norm_scale() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.multihead_norm_scale)
  return _internal_multihead_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_multihead_norm_scale() {
  return &multihead_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_multihead_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.multihead_norm_scale)
  return _internal_mutable_multihead_norm_scale();
}

// repeated float multihead_norm_bias = 2;
inline int EncoderLayer::_internal_multihead_norm_bias_size() const {
  return multihead_norm_bias_.size();
}
inline int EncoderLayer::multihead_norm_bias_size() const {
  return _internal_multihead_norm_bias_size();
}
inline void EncoderLayer::clear_multihead_norm_bias() {
  multihead_norm_bias_.Clear();
}
inline float EncoderLayer::_internal_multihead_norm_bias(int index) const {
  return multihead_norm_bias_.Get(index);
}
inline float EncoderLayer::multihead_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.multihead_norm_bias)
  return _internal_multihead_norm_bias(index);
}
inline void EncoderLayer::set_multihead_norm_bias(int index, float value) {
  multihead_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.multihead_norm_bias)
}
inline void EncoderLayer::_internal_add_multihead_norm_bias(float value) {
  multihead_norm_bias_.Add(value);
}
inline void EncoderLayer::add_multihead_norm_bias(float value) {
  _internal_add_multihead_norm_bias(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.multihead_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_multihead_norm_bias() const {
  return multihead_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::multihead_norm_bias() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.multihead_norm_bias)
  return _internal_multihead_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_multihead_norm_bias() {
  return &multihead_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_multihead_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.multihead_norm_bias)
  return _internal_mutable_multihead_norm_bias();
}

// repeated float multihead_project_kernel_qkv = 3;
inline int EncoderLayer::_internal_multihead_project_kernel_qkv_size() const {
  return multihead_project_kernel_qkv_.size();
}
inline int EncoderLayer::multihead_project_kernel_qkv_size() const {
  return _internal_multihead_project_kernel_qkv_size();
}
inline void EncoderLayer::clear_multihead_project_kernel_qkv() {
  multihead_project_kernel_qkv_.Clear();
}
inline float EncoderLayer::_internal_multihead_project_kernel_qkv(int index) const {
  return multihead_project_kernel_qkv_.Get(index);
}
inline float EncoderLayer::multihead_project_kernel_qkv(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.multihead_project_kernel_qkv)
  return _internal_multihead_project_kernel_qkv(index);
}
inline void EncoderLayer::set_multihead_project_kernel_qkv(int index, float value) {
  multihead_project_kernel_qkv_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.multihead_project_kernel_qkv)
}
inline void EncoderLayer::_internal_add_multihead_project_kernel_qkv(float value) {
  multihead_project_kernel_qkv_.Add(value);
}
inline void EncoderLayer::add_multihead_project_kernel_qkv(float value) {
  _internal_add_multihead_project_kernel_qkv(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.multihead_project_kernel_qkv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_multihead_project_kernel_qkv() const {
  return multihead_project_kernel_qkv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::multihead_project_kernel_qkv() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.multihead_project_kernel_qkv)
  return _internal_multihead_project_kernel_qkv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_multihead_project_kernel_qkv() {
  return &multihead_project_kernel_qkv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_multihead_project_kernel_qkv() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.multihead_project_kernel_qkv)
  return _internal_mutable_multihead_project_kernel_qkv();
}

// repeated float multihead_project_bias_qkv = 4;
inline int EncoderLayer::_internal_multihead_project_bias_qkv_size() const {
  return multihead_project_bias_qkv_.size();
}
inline int EncoderLayer::multihead_project_bias_qkv_size() const {
  return _internal_multihead_project_bias_qkv_size();
}
inline void EncoderLayer::clear_multihead_project_bias_qkv() {
  multihead_project_bias_qkv_.Clear();
}
inline float EncoderLayer::_internal_multihead_project_bias_qkv(int index) const {
  return multihead_project_bias_qkv_.Get(index);
}
inline float EncoderLayer::multihead_project_bias_qkv(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.multihead_project_bias_qkv)
  return _internal_multihead_project_bias_qkv(index);
}
inline void EncoderLayer::set_multihead_project_bias_qkv(int index, float value) {
  multihead_project_bias_qkv_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.multihead_project_bias_qkv)
}
inline void EncoderLayer::_internal_add_multihead_project_bias_qkv(float value) {
  multihead_project_bias_qkv_.Add(value);
}
inline void EncoderLayer::add_multihead_project_bias_qkv(float value) {
  _internal_add_multihead_project_bias_qkv(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.multihead_project_bias_qkv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_multihead_project_bias_qkv() const {
  return multihead_project_bias_qkv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::multihead_project_bias_qkv() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.multihead_project_bias_qkv)
  return _internal_multihead_project_bias_qkv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_multihead_project_bias_qkv() {
  return &multihead_project_bias_qkv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_multihead_project_bias_qkv() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.multihead_project_bias_qkv)
  return _internal_mutable_multihead_project_bias_qkv();
}

// repeated float multihead_project_kernel_output = 5;
inline int EncoderLayer::_internal_multihead_project_kernel_output_size() const {
  return multihead_project_kernel_output_.size();
}
inline int EncoderLayer::multihead_project_kernel_output_size() const {
  return _internal_multihead_project_kernel_output_size();
}
inline void EncoderLayer::clear_multihead_project_kernel_output() {
  multihead_project_kernel_output_.Clear();
}
inline float EncoderLayer::_internal_multihead_project_kernel_output(int index) const {
  return multihead_project_kernel_output_.Get(index);
}
inline float EncoderLayer::multihead_project_kernel_output(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.multihead_project_kernel_output)
  return _internal_multihead_project_kernel_output(index);
}
inline void EncoderLayer::set_multihead_project_kernel_output(int index, float value) {
  multihead_project_kernel_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.multihead_project_kernel_output)
}
inline void EncoderLayer::_internal_add_multihead_project_kernel_output(float value) {
  multihead_project_kernel_output_.Add(value);
}
inline void EncoderLayer::add_multihead_project_kernel_output(float value) {
  _internal_add_multihead_project_kernel_output(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.multihead_project_kernel_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_multihead_project_kernel_output() const {
  return multihead_project_kernel_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::multihead_project_kernel_output() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.multihead_project_kernel_output)
  return _internal_multihead_project_kernel_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_multihead_project_kernel_output() {
  return &multihead_project_kernel_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_multihead_project_kernel_output() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.multihead_project_kernel_output)
  return _internal_mutable_multihead_project_kernel_output();
}

// repeated float multihead_project_bias_output = 6;
inline int EncoderLayer::_internal_multihead_project_bias_output_size() const {
  return multihead_project_bias_output_.size();
}
inline int EncoderLayer::multihead_project_bias_output_size() const {
  return _internal_multihead_project_bias_output_size();
}
inline void EncoderLayer::clear_multihead_project_bias_output() {
  multihead_project_bias_output_.Clear();
}
inline float EncoderLayer::_internal_multihead_project_bias_output(int index) const {
  return multihead_project_bias_output_.Get(index);
}
inline float EncoderLayer::multihead_project_bias_output(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.multihead_project_bias_output)
  return _internal_multihead_project_bias_output(index);
}
inline void EncoderLayer::set_multihead_project_bias_output(int index, float value) {
  multihead_project_bias_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.multihead_project_bias_output)
}
inline void EncoderLayer::_internal_add_multihead_project_bias_output(float value) {
  multihead_project_bias_output_.Add(value);
}
inline void EncoderLayer::add_multihead_project_bias_output(float value) {
  _internal_add_multihead_project_bias_output(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.multihead_project_bias_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_multihead_project_bias_output() const {
  return multihead_project_bias_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::multihead_project_bias_output() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.multihead_project_bias_output)
  return _internal_multihead_project_bias_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_multihead_project_bias_output() {
  return &multihead_project_bias_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_multihead_project_bias_output() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.multihead_project_bias_output)
  return _internal_mutable_multihead_project_bias_output();
}

// repeated float ffn_norm_scale = 7;
inline int EncoderLayer::_internal_ffn_norm_scale_size() const {
  return ffn_norm_scale_.size();
}
inline int EncoderLayer::ffn_norm_scale_size() const {
  return _internal_ffn_norm_scale_size();
}
inline void EncoderLayer::clear_ffn_norm_scale() {
  ffn_norm_scale_.Clear();
}
inline float EncoderLayer::_internal_ffn_norm_scale(int index) const {
  return ffn_norm_scale_.Get(index);
}
inline float EncoderLayer::ffn_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale(index);
}
inline void EncoderLayer::set_ffn_norm_scale(int index, float value) {
  ffn_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.ffn_norm_scale)
}
inline void EncoderLayer::_internal_add_ffn_norm_scale(float value) {
  ffn_norm_scale_.Add(value);
}
inline void EncoderLayer::add_ffn_norm_scale(float value) {
  _internal_add_ffn_norm_scale(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.ffn_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_ffn_norm_scale() const {
  return ffn_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::ffn_norm_scale() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_ffn_norm_scale() {
  return &ffn_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_ffn_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.ffn_norm_scale)
  return _internal_mutable_ffn_norm_scale();
}

// repeated float ffn_norm_bias = 8;
inline int EncoderLayer::_internal_ffn_norm_bias_size() const {
  return ffn_norm_bias_.size();
}
inline int EncoderLayer::ffn_norm_bias_size() const {
  return _internal_ffn_norm_bias_size();
}
inline void EncoderLayer::clear_ffn_norm_bias() {
  ffn_norm_bias_.Clear();
}
inline float EncoderLayer::_internal_ffn_norm_bias(int index) const {
  return ffn_norm_bias_.Get(index);
}
inline float EncoderLayer::ffn_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias(index);
}
inline void EncoderLayer::set_ffn_norm_bias(int index, float value) {
  ffn_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.ffn_norm_bias)
}
inline void EncoderLayer::_internal_add_ffn_norm_bias(float value) {
  ffn_norm_bias_.Add(value);
}
inline void EncoderLayer::add_ffn_norm_bias(float value) {
  _internal_add_ffn_norm_bias(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.ffn_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_ffn_norm_bias() const {
  return ffn_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::ffn_norm_bias() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_ffn_norm_bias() {
  return &ffn_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_ffn_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.ffn_norm_bias)
  return _internal_mutable_ffn_norm_bias();
}

// repeated float ffn_first_kernel = 9;
inline int EncoderLayer::_internal_ffn_first_kernel_size() const {
  return ffn_first_kernel_.size();
}
inline int EncoderLayer::ffn_first_kernel_size() const {
  return _internal_ffn_first_kernel_size();
}
inline void EncoderLayer::clear_ffn_first_kernel() {
  ffn_first_kernel_.Clear();
}
inline float EncoderLayer::_internal_ffn_first_kernel(int index) const {
  return ffn_first_kernel_.Get(index);
}
inline float EncoderLayer::ffn_first_kernel(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.ffn_first_kernel)
  return _internal_ffn_first_kernel(index);
}
inline void EncoderLayer::set_ffn_first_kernel(int index, float value) {
  ffn_first_kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.ffn_first_kernel)
}
inline void EncoderLayer::_internal_add_ffn_first_kernel(float value) {
  ffn_first_kernel_.Add(value);
}
inline void EncoderLayer::add_ffn_first_kernel(float value) {
  _internal_add_ffn_first_kernel(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.ffn_first_kernel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_ffn_first_kernel() const {
  return ffn_first_kernel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::ffn_first_kernel() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.ffn_first_kernel)
  return _internal_ffn_first_kernel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_ffn_first_kernel() {
  return &ffn_first_kernel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_ffn_first_kernel() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.ffn_first_kernel)
  return _internal_mutable_ffn_first_kernel();
}

// repeated float ffn_first_bias = 10;
inline int EncoderLayer::_internal_ffn_first_bias_size() const {
  return ffn_first_bias_.size();
}
inline int EncoderLayer::ffn_first_bias_size() const {
  return _internal_ffn_first_bias_size();
}
inline void EncoderLayer::clear_ffn_first_bias() {
  ffn_first_bias_.Clear();
}
inline float EncoderLayer::_internal_ffn_first_bias(int index) const {
  return ffn_first_bias_.Get(index);
}
inline float EncoderLayer::ffn_first_bias(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias(index);
}
inline void EncoderLayer::set_ffn_first_bias(int index, float value) {
  ffn_first_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.ffn_first_bias)
}
inline void EncoderLayer::_internal_add_ffn_first_bias(float value) {
  ffn_first_bias_.Add(value);
}
inline void EncoderLayer::add_ffn_first_bias(float value) {
  _internal_add_ffn_first_bias(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.ffn_first_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_ffn_first_bias() const {
  return ffn_first_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::ffn_first_bias() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_ffn_first_bias() {
  return &ffn_first_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_ffn_first_bias() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.ffn_first_bias)
  return _internal_mutable_ffn_first_bias();
}

// repeated float ffn_second_kernel = 11;
inline int EncoderLayer::_internal_ffn_second_kernel_size() const {
  return ffn_second_kernel_.size();
}
inline int EncoderLayer::ffn_second_kernel_size() const {
  return _internal_ffn_second_kernel_size();
}
inline void EncoderLayer::clear_ffn_second_kernel() {
  ffn_second_kernel_.Clear();
}
inline float EncoderLayer::_internal_ffn_second_kernel(int index) const {
  return ffn_second_kernel_.Get(index);
}
inline float EncoderLayer::ffn_second_kernel(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.ffn_second_kernel)
  return _internal_ffn_second_kernel(index);
}
inline void EncoderLayer::set_ffn_second_kernel(int index, float value) {
  ffn_second_kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.ffn_second_kernel)
}
inline void EncoderLayer::_internal_add_ffn_second_kernel(float value) {
  ffn_second_kernel_.Add(value);
}
inline void EncoderLayer::add_ffn_second_kernel(float value) {
  _internal_add_ffn_second_kernel(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.ffn_second_kernel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_ffn_second_kernel() const {
  return ffn_second_kernel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::ffn_second_kernel() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.ffn_second_kernel)
  return _internal_ffn_second_kernel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_ffn_second_kernel() {
  return &ffn_second_kernel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_ffn_second_kernel() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.ffn_second_kernel)
  return _internal_mutable_ffn_second_kernel();
}

// repeated float ffn_second_bias = 12;
inline int EncoderLayer::_internal_ffn_second_bias_size() const {
  return ffn_second_bias_.size();
}
inline int EncoderLayer::ffn_second_bias_size() const {
  return _internal_ffn_second_bias_size();
}
inline void EncoderLayer::clear_ffn_second_bias() {
  ffn_second_bias_.Clear();
}
inline float EncoderLayer::_internal_ffn_second_bias(int index) const {
  return ffn_second_bias_.Get(index);
}
inline float EncoderLayer::ffn_second_bias(int index) const {
  // @@protoc_insertion_point(field_get:EncoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias(index);
}
inline void EncoderLayer::set_ffn_second_bias(int index, float value) {
  ffn_second_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:EncoderLayer.ffn_second_bias)
}
inline void EncoderLayer::_internal_add_ffn_second_bias(float value) {
  ffn_second_bias_.Add(value);
}
inline void EncoderLayer::add_ffn_second_bias(float value) {
  _internal_add_ffn_second_bias(value);
  // @@protoc_insertion_point(field_add:EncoderLayer.ffn_second_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::_internal_ffn_second_bias() const {
  return ffn_second_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EncoderLayer::ffn_second_bias() const {
  // @@protoc_insertion_point(field_list:EncoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::_internal_mutable_ffn_second_bias() {
  return &ffn_second_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EncoderLayer::mutable_ffn_second_bias() {
  // @@protoc_insertion_point(field_mutable_list:EncoderLayer.ffn_second_bias)
  return _internal_mutable_ffn_second_bias();
}

// -------------------------------------------------------------------

// DecoderLayer

// repeated float self_norm_scale = 1;
inline int DecoderLayer::_internal_self_norm_scale_size() const {
  return self_norm_scale_.size();
}
inline int DecoderLayer::self_norm_scale_size() const {
  return _internal_self_norm_scale_size();
}
inline void DecoderLayer::clear_self_norm_scale() {
  self_norm_scale_.Clear();
}
inline float DecoderLayer::_internal_self_norm_scale(int index) const {
  return self_norm_scale_.Get(index);
}
inline float DecoderLayer::self_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.self_norm_scale)
  return _internal_self_norm_scale(index);
}
inline void DecoderLayer::set_self_norm_scale(int index, float value) {
  self_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.self_norm_scale)
}
inline void DecoderLayer::_internal_add_self_norm_scale(float value) {
  self_norm_scale_.Add(value);
}
inline void DecoderLayer::add_self_norm_scale(float value) {
  _internal_add_self_norm_scale(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.self_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_self_norm_scale() const {
  return self_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::self_norm_scale() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.self_norm_scale)
  return _internal_self_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_self_norm_scale() {
  return &self_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_self_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.self_norm_scale)
  return _internal_mutable_self_norm_scale();
}

// repeated float self_norm_bias = 2;
inline int DecoderLayer::_internal_self_norm_bias_size() const {
  return self_norm_bias_.size();
}
inline int DecoderLayer::self_norm_bias_size() const {
  return _internal_self_norm_bias_size();
}
inline void DecoderLayer::clear_self_norm_bias() {
  self_norm_bias_.Clear();
}
inline float DecoderLayer::_internal_self_norm_bias(int index) const {
  return self_norm_bias_.Get(index);
}
inline float DecoderLayer::self_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.self_norm_bias)
  return _internal_self_norm_bias(index);
}
inline void DecoderLayer::set_self_norm_bias(int index, float value) {
  self_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.self_norm_bias)
}
inline void DecoderLayer::_internal_add_self_norm_bias(float value) {
  self_norm_bias_.Add(value);
}
inline void DecoderLayer::add_self_norm_bias(float value) {
  _internal_add_self_norm_bias(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.self_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_self_norm_bias() const {
  return self_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::self_norm_bias() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.self_norm_bias)
  return _internal_self_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_self_norm_bias() {
  return &self_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_self_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.self_norm_bias)
  return _internal_mutable_self_norm_bias();
}

// repeated float self_project_kernel_qkv = 3;
inline int DecoderLayer::_internal_self_project_kernel_qkv_size() const {
  return self_project_kernel_qkv_.size();
}
inline int DecoderLayer::self_project_kernel_qkv_size() const {
  return _internal_self_project_kernel_qkv_size();
}
inline void DecoderLayer::clear_self_project_kernel_qkv() {
  self_project_kernel_qkv_.Clear();
}
inline float DecoderLayer::_internal_self_project_kernel_qkv(int index) const {
  return self_project_kernel_qkv_.Get(index);
}
inline float DecoderLayer::self_project_kernel_qkv(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.self_project_kernel_qkv)
  return _internal_self_project_kernel_qkv(index);
}
inline void DecoderLayer::set_self_project_kernel_qkv(int index, float value) {
  self_project_kernel_qkv_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.self_project_kernel_qkv)
}
inline void DecoderLayer::_internal_add_self_project_kernel_qkv(float value) {
  self_project_kernel_qkv_.Add(value);
}
inline void DecoderLayer::add_self_project_kernel_qkv(float value) {
  _internal_add_self_project_kernel_qkv(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.self_project_kernel_qkv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_self_project_kernel_qkv() const {
  return self_project_kernel_qkv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::self_project_kernel_qkv() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.self_project_kernel_qkv)
  return _internal_self_project_kernel_qkv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_self_project_kernel_qkv() {
  return &self_project_kernel_qkv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_self_project_kernel_qkv() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.self_project_kernel_qkv)
  return _internal_mutable_self_project_kernel_qkv();
}

// repeated float self_project_bias_qkv = 4;
inline int DecoderLayer::_internal_self_project_bias_qkv_size() const {
  return self_project_bias_qkv_.size();
}
inline int DecoderLayer::self_project_bias_qkv_size() const {
  return _internal_self_project_bias_qkv_size();
}
inline void DecoderLayer::clear_self_project_bias_qkv() {
  self_project_bias_qkv_.Clear();
}
inline float DecoderLayer::_internal_self_project_bias_qkv(int index) const {
  return self_project_bias_qkv_.Get(index);
}
inline float DecoderLayer::self_project_bias_qkv(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.self_project_bias_qkv)
  return _internal_self_project_bias_qkv(index);
}
inline void DecoderLayer::set_self_project_bias_qkv(int index, float value) {
  self_project_bias_qkv_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.self_project_bias_qkv)
}
inline void DecoderLayer::_internal_add_self_project_bias_qkv(float value) {
  self_project_bias_qkv_.Add(value);
}
inline void DecoderLayer::add_self_project_bias_qkv(float value) {
  _internal_add_self_project_bias_qkv(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.self_project_bias_qkv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_self_project_bias_qkv() const {
  return self_project_bias_qkv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::self_project_bias_qkv() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.self_project_bias_qkv)
  return _internal_self_project_bias_qkv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_self_project_bias_qkv() {
  return &self_project_bias_qkv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_self_project_bias_qkv() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.self_project_bias_qkv)
  return _internal_mutable_self_project_bias_qkv();
}

// repeated float self_project_kernel_output = 5;
inline int DecoderLayer::_internal_self_project_kernel_output_size() const {
  return self_project_kernel_output_.size();
}
inline int DecoderLayer::self_project_kernel_output_size() const {
  return _internal_self_project_kernel_output_size();
}
inline void DecoderLayer::clear_self_project_kernel_output() {
  self_project_kernel_output_.Clear();
}
inline float DecoderLayer::_internal_self_project_kernel_output(int index) const {
  return self_project_kernel_output_.Get(index);
}
inline float DecoderLayer::self_project_kernel_output(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.self_project_kernel_output)
  return _internal_self_project_kernel_output(index);
}
inline void DecoderLayer::set_self_project_kernel_output(int index, float value) {
  self_project_kernel_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.self_project_kernel_output)
}
inline void DecoderLayer::_internal_add_self_project_kernel_output(float value) {
  self_project_kernel_output_.Add(value);
}
inline void DecoderLayer::add_self_project_kernel_output(float value) {
  _internal_add_self_project_kernel_output(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.self_project_kernel_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_self_project_kernel_output() const {
  return self_project_kernel_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::self_project_kernel_output() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.self_project_kernel_output)
  return _internal_self_project_kernel_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_self_project_kernel_output() {
  return &self_project_kernel_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_self_project_kernel_output() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.self_project_kernel_output)
  return _internal_mutable_self_project_kernel_output();
}

// repeated float self_project_bias_output = 6;
inline int DecoderLayer::_internal_self_project_bias_output_size() const {
  return self_project_bias_output_.size();
}
inline int DecoderLayer::self_project_bias_output_size() const {
  return _internal_self_project_bias_output_size();
}
inline void DecoderLayer::clear_self_project_bias_output() {
  self_project_bias_output_.Clear();
}
inline float DecoderLayer::_internal_self_project_bias_output(int index) const {
  return self_project_bias_output_.Get(index);
}
inline float DecoderLayer::self_project_bias_output(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.self_project_bias_output)
  return _internal_self_project_bias_output(index);
}
inline void DecoderLayer::set_self_project_bias_output(int index, float value) {
  self_project_bias_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.self_project_bias_output)
}
inline void DecoderLayer::_internal_add_self_project_bias_output(float value) {
  self_project_bias_output_.Add(value);
}
inline void DecoderLayer::add_self_project_bias_output(float value) {
  _internal_add_self_project_bias_output(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.self_project_bias_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_self_project_bias_output() const {
  return self_project_bias_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::self_project_bias_output() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.self_project_bias_output)
  return _internal_self_project_bias_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_self_project_bias_output() {
  return &self_project_bias_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_self_project_bias_output() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.self_project_bias_output)
  return _internal_mutable_self_project_bias_output();
}

// repeated float encdec_norm_scale = 7;
inline int DecoderLayer::_internal_encdec_norm_scale_size() const {
  return encdec_norm_scale_.size();
}
inline int DecoderLayer::encdec_norm_scale_size() const {
  return _internal_encdec_norm_scale_size();
}
inline void DecoderLayer::clear_encdec_norm_scale() {
  encdec_norm_scale_.Clear();
}
inline float DecoderLayer::_internal_encdec_norm_scale(int index) const {
  return encdec_norm_scale_.Get(index);
}
inline float DecoderLayer::encdec_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.encdec_norm_scale)
  return _internal_encdec_norm_scale(index);
}
inline void DecoderLayer::set_encdec_norm_scale(int index, float value) {
  encdec_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.encdec_norm_scale)
}
inline void DecoderLayer::_internal_add_encdec_norm_scale(float value) {
  encdec_norm_scale_.Add(value);
}
inline void DecoderLayer::add_encdec_norm_scale(float value) {
  _internal_add_encdec_norm_scale(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.encdec_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_encdec_norm_scale() const {
  return encdec_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::encdec_norm_scale() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.encdec_norm_scale)
  return _internal_encdec_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_encdec_norm_scale() {
  return &encdec_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_encdec_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.encdec_norm_scale)
  return _internal_mutable_encdec_norm_scale();
}

// repeated float encdec_norm_bias = 8;
inline int DecoderLayer::_internal_encdec_norm_bias_size() const {
  return encdec_norm_bias_.size();
}
inline int DecoderLayer::encdec_norm_bias_size() const {
  return _internal_encdec_norm_bias_size();
}
inline void DecoderLayer::clear_encdec_norm_bias() {
  encdec_norm_bias_.Clear();
}
inline float DecoderLayer::_internal_encdec_norm_bias(int index) const {
  return encdec_norm_bias_.Get(index);
}
inline float DecoderLayer::encdec_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.encdec_norm_bias)
  return _internal_encdec_norm_bias(index);
}
inline void DecoderLayer::set_encdec_norm_bias(int index, float value) {
  encdec_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.encdec_norm_bias)
}
inline void DecoderLayer::_internal_add_encdec_norm_bias(float value) {
  encdec_norm_bias_.Add(value);
}
inline void DecoderLayer::add_encdec_norm_bias(float value) {
  _internal_add_encdec_norm_bias(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.encdec_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_encdec_norm_bias() const {
  return encdec_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::encdec_norm_bias() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.encdec_norm_bias)
  return _internal_encdec_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_encdec_norm_bias() {
  return &encdec_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_encdec_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.encdec_norm_bias)
  return _internal_mutable_encdec_norm_bias();
}

// repeated float encdec_project_kernel_q = 9;
inline int DecoderLayer::_internal_encdec_project_kernel_q_size() const {
  return encdec_project_kernel_q_.size();
}
inline int DecoderLayer::encdec_project_kernel_q_size() const {
  return _internal_encdec_project_kernel_q_size();
}
inline void DecoderLayer::clear_encdec_project_kernel_q() {
  encdec_project_kernel_q_.Clear();
}
inline float DecoderLayer::_internal_encdec_project_kernel_q(int index) const {
  return encdec_project_kernel_q_.Get(index);
}
inline float DecoderLayer::encdec_project_kernel_q(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.encdec_project_kernel_q)
  return _internal_encdec_project_kernel_q(index);
}
inline void DecoderLayer::set_encdec_project_kernel_q(int index, float value) {
  encdec_project_kernel_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.encdec_project_kernel_q)
}
inline void DecoderLayer::_internal_add_encdec_project_kernel_q(float value) {
  encdec_project_kernel_q_.Add(value);
}
inline void DecoderLayer::add_encdec_project_kernel_q(float value) {
  _internal_add_encdec_project_kernel_q(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.encdec_project_kernel_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_encdec_project_kernel_q() const {
  return encdec_project_kernel_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::encdec_project_kernel_q() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.encdec_project_kernel_q)
  return _internal_encdec_project_kernel_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_encdec_project_kernel_q() {
  return &encdec_project_kernel_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_encdec_project_kernel_q() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.encdec_project_kernel_q)
  return _internal_mutable_encdec_project_kernel_q();
}

// repeated float encdec_project_bias_q = 10;
inline int DecoderLayer::_internal_encdec_project_bias_q_size() const {
  return encdec_project_bias_q_.size();
}
inline int DecoderLayer::encdec_project_bias_q_size() const {
  return _internal_encdec_project_bias_q_size();
}
inline void DecoderLayer::clear_encdec_project_bias_q() {
  encdec_project_bias_q_.Clear();
}
inline float DecoderLayer::_internal_encdec_project_bias_q(int index) const {
  return encdec_project_bias_q_.Get(index);
}
inline float DecoderLayer::encdec_project_bias_q(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.encdec_project_bias_q)
  return _internal_encdec_project_bias_q(index);
}
inline void DecoderLayer::set_encdec_project_bias_q(int index, float value) {
  encdec_project_bias_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.encdec_project_bias_q)
}
inline void DecoderLayer::_internal_add_encdec_project_bias_q(float value) {
  encdec_project_bias_q_.Add(value);
}
inline void DecoderLayer::add_encdec_project_bias_q(float value) {
  _internal_add_encdec_project_bias_q(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.encdec_project_bias_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_encdec_project_bias_q() const {
  return encdec_project_bias_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::encdec_project_bias_q() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.encdec_project_bias_q)
  return _internal_encdec_project_bias_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_encdec_project_bias_q() {
  return &encdec_project_bias_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_encdec_project_bias_q() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.encdec_project_bias_q)
  return _internal_mutable_encdec_project_bias_q();
}

// repeated float encdec_project_kernel_output = 11;
inline int DecoderLayer::_internal_encdec_project_kernel_output_size() const {
  return encdec_project_kernel_output_.size();
}
inline int DecoderLayer::encdec_project_kernel_output_size() const {
  return _internal_encdec_project_kernel_output_size();
}
inline void DecoderLayer::clear_encdec_project_kernel_output() {
  encdec_project_kernel_output_.Clear();
}
inline float DecoderLayer::_internal_encdec_project_kernel_output(int index) const {
  return encdec_project_kernel_output_.Get(index);
}
inline float DecoderLayer::encdec_project_kernel_output(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.encdec_project_kernel_output)
  return _internal_encdec_project_kernel_output(index);
}
inline void DecoderLayer::set_encdec_project_kernel_output(int index, float value) {
  encdec_project_kernel_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.encdec_project_kernel_output)
}
inline void DecoderLayer::_internal_add_encdec_project_kernel_output(float value) {
  encdec_project_kernel_output_.Add(value);
}
inline void DecoderLayer::add_encdec_project_kernel_output(float value) {
  _internal_add_encdec_project_kernel_output(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.encdec_project_kernel_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_encdec_project_kernel_output() const {
  return encdec_project_kernel_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::encdec_project_kernel_output() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.encdec_project_kernel_output)
  return _internal_encdec_project_kernel_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_encdec_project_kernel_output() {
  return &encdec_project_kernel_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_encdec_project_kernel_output() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.encdec_project_kernel_output)
  return _internal_mutable_encdec_project_kernel_output();
}

// repeated float encdec_project_bias_output = 12;
inline int DecoderLayer::_internal_encdec_project_bias_output_size() const {
  return encdec_project_bias_output_.size();
}
inline int DecoderLayer::encdec_project_bias_output_size() const {
  return _internal_encdec_project_bias_output_size();
}
inline void DecoderLayer::clear_encdec_project_bias_output() {
  encdec_project_bias_output_.Clear();
}
inline float DecoderLayer::_internal_encdec_project_bias_output(int index) const {
  return encdec_project_bias_output_.Get(index);
}
inline float DecoderLayer::encdec_project_bias_output(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.encdec_project_bias_output)
  return _internal_encdec_project_bias_output(index);
}
inline void DecoderLayer::set_encdec_project_bias_output(int index, float value) {
  encdec_project_bias_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.encdec_project_bias_output)
}
inline void DecoderLayer::_internal_add_encdec_project_bias_output(float value) {
  encdec_project_bias_output_.Add(value);
}
inline void DecoderLayer::add_encdec_project_bias_output(float value) {
  _internal_add_encdec_project_bias_output(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.encdec_project_bias_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_encdec_project_bias_output() const {
  return encdec_project_bias_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::encdec_project_bias_output() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.encdec_project_bias_output)
  return _internal_encdec_project_bias_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_encdec_project_bias_output() {
  return &encdec_project_bias_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_encdec_project_bias_output() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.encdec_project_bias_output)
  return _internal_mutable_encdec_project_bias_output();
}

// repeated float ffn_norm_scale = 13;
inline int DecoderLayer::_internal_ffn_norm_scale_size() const {
  return ffn_norm_scale_.size();
}
inline int DecoderLayer::ffn_norm_scale_size() const {
  return _internal_ffn_norm_scale_size();
}
inline void DecoderLayer::clear_ffn_norm_scale() {
  ffn_norm_scale_.Clear();
}
inline float DecoderLayer::_internal_ffn_norm_scale(int index) const {
  return ffn_norm_scale_.Get(index);
}
inline float DecoderLayer::ffn_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale(index);
}
inline void DecoderLayer::set_ffn_norm_scale(int index, float value) {
  ffn_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.ffn_norm_scale)
}
inline void DecoderLayer::_internal_add_ffn_norm_scale(float value) {
  ffn_norm_scale_.Add(value);
}
inline void DecoderLayer::add_ffn_norm_scale(float value) {
  _internal_add_ffn_norm_scale(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.ffn_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_ffn_norm_scale() const {
  return ffn_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::ffn_norm_scale() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_ffn_norm_scale() {
  return &ffn_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_ffn_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.ffn_norm_scale)
  return _internal_mutable_ffn_norm_scale();
}

// repeated float ffn_norm_bias = 14;
inline int DecoderLayer::_internal_ffn_norm_bias_size() const {
  return ffn_norm_bias_.size();
}
inline int DecoderLayer::ffn_norm_bias_size() const {
  return _internal_ffn_norm_bias_size();
}
inline void DecoderLayer::clear_ffn_norm_bias() {
  ffn_norm_bias_.Clear();
}
inline float DecoderLayer::_internal_ffn_norm_bias(int index) const {
  return ffn_norm_bias_.Get(index);
}
inline float DecoderLayer::ffn_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias(index);
}
inline void DecoderLayer::set_ffn_norm_bias(int index, float value) {
  ffn_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.ffn_norm_bias)
}
inline void DecoderLayer::_internal_add_ffn_norm_bias(float value) {
  ffn_norm_bias_.Add(value);
}
inline void DecoderLayer::add_ffn_norm_bias(float value) {
  _internal_add_ffn_norm_bias(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.ffn_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_ffn_norm_bias() const {
  return ffn_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::ffn_norm_bias() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_ffn_norm_bias() {
  return &ffn_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_ffn_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.ffn_norm_bias)
  return _internal_mutable_ffn_norm_bias();
}

// repeated float ffn_first_kernel = 15;
inline int DecoderLayer::_internal_ffn_first_kernel_size() const {
  return ffn_first_kernel_.size();
}
inline int DecoderLayer::ffn_first_kernel_size() const {
  return _internal_ffn_first_kernel_size();
}
inline void DecoderLayer::clear_ffn_first_kernel() {
  ffn_first_kernel_.Clear();
}
inline float DecoderLayer::_internal_ffn_first_kernel(int index) const {
  return ffn_first_kernel_.Get(index);
}
inline float DecoderLayer::ffn_first_kernel(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.ffn_first_kernel)
  return _internal_ffn_first_kernel(index);
}
inline void DecoderLayer::set_ffn_first_kernel(int index, float value) {
  ffn_first_kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.ffn_first_kernel)
}
inline void DecoderLayer::_internal_add_ffn_first_kernel(float value) {
  ffn_first_kernel_.Add(value);
}
inline void DecoderLayer::add_ffn_first_kernel(float value) {
  _internal_add_ffn_first_kernel(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.ffn_first_kernel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_ffn_first_kernel() const {
  return ffn_first_kernel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::ffn_first_kernel() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.ffn_first_kernel)
  return _internal_ffn_first_kernel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_ffn_first_kernel() {
  return &ffn_first_kernel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_ffn_first_kernel() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.ffn_first_kernel)
  return _internal_mutable_ffn_first_kernel();
}

// repeated float ffn_first_bias = 16;
inline int DecoderLayer::_internal_ffn_first_bias_size() const {
  return ffn_first_bias_.size();
}
inline int DecoderLayer::ffn_first_bias_size() const {
  return _internal_ffn_first_bias_size();
}
inline void DecoderLayer::clear_ffn_first_bias() {
  ffn_first_bias_.Clear();
}
inline float DecoderLayer::_internal_ffn_first_bias(int index) const {
  return ffn_first_bias_.Get(index);
}
inline float DecoderLayer::ffn_first_bias(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias(index);
}
inline void DecoderLayer::set_ffn_first_bias(int index, float value) {
  ffn_first_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.ffn_first_bias)
}
inline void DecoderLayer::_internal_add_ffn_first_bias(float value) {
  ffn_first_bias_.Add(value);
}
inline void DecoderLayer::add_ffn_first_bias(float value) {
  _internal_add_ffn_first_bias(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.ffn_first_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_ffn_first_bias() const {
  return ffn_first_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::ffn_first_bias() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_ffn_first_bias() {
  return &ffn_first_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_ffn_first_bias() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.ffn_first_bias)
  return _internal_mutable_ffn_first_bias();
}

// repeated float ffn_second_kernel = 17;
inline int DecoderLayer::_internal_ffn_second_kernel_size() const {
  return ffn_second_kernel_.size();
}
inline int DecoderLayer::ffn_second_kernel_size() const {
  return _internal_ffn_second_kernel_size();
}
inline void DecoderLayer::clear_ffn_second_kernel() {
  ffn_second_kernel_.Clear();
}
inline float DecoderLayer::_internal_ffn_second_kernel(int index) const {
  return ffn_second_kernel_.Get(index);
}
inline float DecoderLayer::ffn_second_kernel(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.ffn_second_kernel)
  return _internal_ffn_second_kernel(index);
}
inline void DecoderLayer::set_ffn_second_kernel(int index, float value) {
  ffn_second_kernel_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.ffn_second_kernel)
}
inline void DecoderLayer::_internal_add_ffn_second_kernel(float value) {
  ffn_second_kernel_.Add(value);
}
inline void DecoderLayer::add_ffn_second_kernel(float value) {
  _internal_add_ffn_second_kernel(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.ffn_second_kernel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_ffn_second_kernel() const {
  return ffn_second_kernel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::ffn_second_kernel() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.ffn_second_kernel)
  return _internal_ffn_second_kernel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_ffn_second_kernel() {
  return &ffn_second_kernel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_ffn_second_kernel() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.ffn_second_kernel)
  return _internal_mutable_ffn_second_kernel();
}

// repeated float ffn_second_bias = 18;
inline int DecoderLayer::_internal_ffn_second_bias_size() const {
  return ffn_second_bias_.size();
}
inline int DecoderLayer::ffn_second_bias_size() const {
  return _internal_ffn_second_bias_size();
}
inline void DecoderLayer::clear_ffn_second_bias() {
  ffn_second_bias_.Clear();
}
inline float DecoderLayer::_internal_ffn_second_bias(int index) const {
  return ffn_second_bias_.Get(index);
}
inline float DecoderLayer::ffn_second_bias(int index) const {
  // @@protoc_insertion_point(field_get:DecoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias(index);
}
inline void DecoderLayer::set_ffn_second_bias(int index, float value) {
  ffn_second_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:DecoderLayer.ffn_second_bias)
}
inline void DecoderLayer::_internal_add_ffn_second_bias(float value) {
  ffn_second_bias_.Add(value);
}
inline void DecoderLayer::add_ffn_second_bias(float value) {
  _internal_add_ffn_second_bias(value);
  // @@protoc_insertion_point(field_add:DecoderLayer.ffn_second_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::_internal_ffn_second_bias() const {
  return ffn_second_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DecoderLayer::ffn_second_bias() const {
  // @@protoc_insertion_point(field_list:DecoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::_internal_mutable_ffn_second_bias() {
  return &ffn_second_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DecoderLayer::mutable_ffn_second_bias() {
  // @@protoc_insertion_point(field_mutable_list:DecoderLayer.ffn_second_bias)
  return _internal_mutable_ffn_second_bias();
}

// -------------------------------------------------------------------

// EmbeddingLayer

// repeated float token_embedding = 1;
inline int EmbeddingLayer::_internal_token_embedding_size() const {
  return token_embedding_.size();
}
inline int EmbeddingLayer::token_embedding_size() const {
  return _internal_token_embedding_size();
}
inline void EmbeddingLayer::clear_token_embedding() {
  token_embedding_.Clear();
}
inline float EmbeddingLayer::_internal_token_embedding(int index) const {
  return token_embedding_.Get(index);
}
inline float EmbeddingLayer::token_embedding(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.token_embedding)
  return _internal_token_embedding(index);
}
inline void EmbeddingLayer::set_token_embedding(int index, float value) {
  token_embedding_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.token_embedding)
}
inline void EmbeddingLayer::_internal_add_token_embedding(float value) {
  token_embedding_.Add(value);
}
inline void EmbeddingLayer::add_token_embedding(float value) {
  _internal_add_token_embedding(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.token_embedding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_token_embedding() const {
  return token_embedding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::token_embedding() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.token_embedding)
  return _internal_token_embedding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_token_embedding() {
  return &token_embedding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_token_embedding() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.token_embedding)
  return _internal_mutable_token_embedding();
}

// repeated float position_embedding = 2;
inline int EmbeddingLayer::_internal_position_embedding_size() const {
  return position_embedding_.size();
}
inline int EmbeddingLayer::position_embedding_size() const {
  return _internal_position_embedding_size();
}
inline void EmbeddingLayer::clear_position_embedding() {
  position_embedding_.Clear();
}
inline float EmbeddingLayer::_internal_position_embedding(int index) const {
  return position_embedding_.Get(index);
}
inline float EmbeddingLayer::position_embedding(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.position_embedding)
  return _internal_position_embedding(index);
}
inline void EmbeddingLayer::set_position_embedding(int index, float value) {
  position_embedding_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.position_embedding)
}
inline void EmbeddingLayer::_internal_add_position_embedding(float value) {
  position_embedding_.Add(value);
}
inline void EmbeddingLayer::add_position_embedding(float value) {
  _internal_add_position_embedding(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.position_embedding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_position_embedding() const {
  return position_embedding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::position_embedding() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.position_embedding)
  return _internal_position_embedding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_position_embedding() {
  return &position_embedding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_position_embedding() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.position_embedding)
  return _internal_mutable_position_embedding();
}

// repeated float norm_scale = 3;
inline int EmbeddingLayer::_internal_norm_scale_size() const {
  return norm_scale_.size();
}
inline int EmbeddingLayer::norm_scale_size() const {
  return _internal_norm_scale_size();
}
inline void EmbeddingLayer::clear_norm_scale() {
  norm_scale_.Clear();
}
inline float EmbeddingLayer::_internal_norm_scale(int index) const {
  return norm_scale_.Get(index);
}
inline float EmbeddingLayer::norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.norm_scale)
  return _internal_norm_scale(index);
}
inline void EmbeddingLayer::set_norm_scale(int index, float value) {
  norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.norm_scale)
}
inline void EmbeddingLayer::_internal_add_norm_scale(float value) {
  norm_scale_.Add(value);
}
inline void EmbeddingLayer::add_norm_scale(float value) {
  _internal_add_norm_scale(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_norm_scale() const {
  return norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::norm_scale() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.norm_scale)
  return _internal_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_norm_scale() {
  return &norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.norm_scale)
  return _internal_mutable_norm_scale();
}

// repeated float norm_bias = 4;
inline int EmbeddingLayer::_internal_norm_bias_size() const {
  return norm_bias_.size();
}
inline int EmbeddingLayer::norm_bias_size() const {
  return _internal_norm_bias_size();
}
inline void EmbeddingLayer::clear_norm_bias() {
  norm_bias_.Clear();
}
inline float EmbeddingLayer::_internal_norm_bias(int index) const {
  return norm_bias_.Get(index);
}
inline float EmbeddingLayer::norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.norm_bias)
  return _internal_norm_bias(index);
}
inline void EmbeddingLayer::set_norm_bias(int index, float value) {
  norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.norm_bias)
}
inline void EmbeddingLayer::_internal_add_norm_bias(float value) {
  norm_bias_.Add(value);
}
inline void EmbeddingLayer::add_norm_bias(float value) {
  _internal_add_norm_bias(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_norm_bias() const {
  return norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::norm_bias() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.norm_bias)
  return _internal_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_norm_bias() {
  return &norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.norm_bias)
  return _internal_mutable_norm_bias();
}

// repeated float encode_output_project_kernel_kv = 5;
inline int EmbeddingLayer::_internal_encode_output_project_kernel_kv_size() const {
  return encode_output_project_kernel_kv_.size();
}
inline int EmbeddingLayer::encode_output_project_kernel_kv_size() const {
  return _internal_encode_output_project_kernel_kv_size();
}
inline void EmbeddingLayer::clear_encode_output_project_kernel_kv() {
  encode_output_project_kernel_kv_.Clear();
}
inline float EmbeddingLayer::_internal_encode_output_project_kernel_kv(int index) const {
  return encode_output_project_kernel_kv_.Get(index);
}
inline float EmbeddingLayer::encode_output_project_kernel_kv(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.encode_output_project_kernel_kv)
  return _internal_encode_output_project_kernel_kv(index);
}
inline void EmbeddingLayer::set_encode_output_project_kernel_kv(int index, float value) {
  encode_output_project_kernel_kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.encode_output_project_kernel_kv)
}
inline void EmbeddingLayer::_internal_add_encode_output_project_kernel_kv(float value) {
  encode_output_project_kernel_kv_.Add(value);
}
inline void EmbeddingLayer::add_encode_output_project_kernel_kv(float value) {
  _internal_add_encode_output_project_kernel_kv(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.encode_output_project_kernel_kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_encode_output_project_kernel_kv() const {
  return encode_output_project_kernel_kv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::encode_output_project_kernel_kv() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.encode_output_project_kernel_kv)
  return _internal_encode_output_project_kernel_kv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_encode_output_project_kernel_kv() {
  return &encode_output_project_kernel_kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_encode_output_project_kernel_kv() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.encode_output_project_kernel_kv)
  return _internal_mutable_encode_output_project_kernel_kv();
}

// repeated float encode_output_project_bias_kv = 6;
inline int EmbeddingLayer::_internal_encode_output_project_bias_kv_size() const {
  return encode_output_project_bias_kv_.size();
}
inline int EmbeddingLayer::encode_output_project_bias_kv_size() const {
  return _internal_encode_output_project_bias_kv_size();
}
inline void EmbeddingLayer::clear_encode_output_project_bias_kv() {
  encode_output_project_bias_kv_.Clear();
}
inline float EmbeddingLayer::_internal_encode_output_project_bias_kv(int index) const {
  return encode_output_project_bias_kv_.Get(index);
}
inline float EmbeddingLayer::encode_output_project_bias_kv(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.encode_output_project_bias_kv)
  return _internal_encode_output_project_bias_kv(index);
}
inline void EmbeddingLayer::set_encode_output_project_bias_kv(int index, float value) {
  encode_output_project_bias_kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.encode_output_project_bias_kv)
}
inline void EmbeddingLayer::_internal_add_encode_output_project_bias_kv(float value) {
  encode_output_project_bias_kv_.Add(value);
}
inline void EmbeddingLayer::add_encode_output_project_bias_kv(float value) {
  _internal_add_encode_output_project_bias_kv(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.encode_output_project_bias_kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_encode_output_project_bias_kv() const {
  return encode_output_project_bias_kv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::encode_output_project_bias_kv() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.encode_output_project_bias_kv)
  return _internal_encode_output_project_bias_kv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_encode_output_project_bias_kv() {
  return &encode_output_project_bias_kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_encode_output_project_bias_kv() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.encode_output_project_bias_kv)
  return _internal_mutable_encode_output_project_bias_kv();
}

// repeated float shared_bias = 7;
inline int EmbeddingLayer::_internal_shared_bias_size() const {
  return shared_bias_.size();
}
inline int EmbeddingLayer::shared_bias_size() const {
  return _internal_shared_bias_size();
}
inline void EmbeddingLayer::clear_shared_bias() {
  shared_bias_.Clear();
}
inline float EmbeddingLayer::_internal_shared_bias(int index) const {
  return shared_bias_.Get(index);
}
inline float EmbeddingLayer::shared_bias(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.shared_bias)
  return _internal_shared_bias(index);
}
inline void EmbeddingLayer::set_shared_bias(int index, float value) {
  shared_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.shared_bias)
}
inline void EmbeddingLayer::_internal_add_shared_bias(float value) {
  shared_bias_.Add(value);
}
inline void EmbeddingLayer::add_shared_bias(float value) {
  _internal_add_shared_bias(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.shared_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_shared_bias() const {
  return shared_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::shared_bias() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.shared_bias)
  return _internal_shared_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_shared_bias() {
  return &shared_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_shared_bias() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.shared_bias)
  return _internal_mutable_shared_bias();
}

// repeated float lang_emb = 8;
inline int EmbeddingLayer::_internal_lang_emb_size() const {
  return lang_emb_.size();
}
inline int EmbeddingLayer::lang_emb_size() const {
  return _internal_lang_emb_size();
}
inline void EmbeddingLayer::clear_lang_emb() {
  lang_emb_.Clear();
}
inline float EmbeddingLayer::_internal_lang_emb(int index) const {
  return lang_emb_.Get(index);
}
inline float EmbeddingLayer::lang_emb(int index) const {
  // @@protoc_insertion_point(field_get:EmbeddingLayer.lang_emb)
  return _internal_lang_emb(index);
}
inline void EmbeddingLayer::set_lang_emb(int index, float value) {
  lang_emb_.Set(index, value);
  // @@protoc_insertion_point(field_set:EmbeddingLayer.lang_emb)
}
inline void EmbeddingLayer::_internal_add_lang_emb(float value) {
  lang_emb_.Add(value);
}
inline void EmbeddingLayer::add_lang_emb(float value) {
  _internal_add_lang_emb(value);
  // @@protoc_insertion_point(field_add:EmbeddingLayer.lang_emb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::_internal_lang_emb() const {
  return lang_emb_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbeddingLayer::lang_emb() const {
  // @@protoc_insertion_point(field_list:EmbeddingLayer.lang_emb)
  return _internal_lang_emb();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::_internal_mutable_lang_emb() {
  return &lang_emb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbeddingLayer::mutable_lang_emb() {
  // @@protoc_insertion_point(field_mutable_list:EmbeddingLayer.lang_emb)
  return _internal_mutable_lang_emb();
}

// -------------------------------------------------------------------

// ModelConf

// int32 head_num = 1;
inline void ModelConf::clear_head_num() {
  head_num_ = 0;
}
inline int32_t ModelConf::_internal_head_num() const {
  return head_num_;
}
inline int32_t ModelConf::head_num() const {
  // @@protoc_insertion_point(field_get:ModelConf.head_num)
  return _internal_head_num();
}
inline void ModelConf::_internal_set_head_num(int32_t value) {
  
  head_num_ = value;
}
inline void ModelConf::set_head_num(int32_t value) {
  _internal_set_head_num(value);
  // @@protoc_insertion_point(field_set:ModelConf.head_num)
}

// int32 beam_size = 2;
inline void ModelConf::clear_beam_size() {
  beam_size_ = 0;
}
inline int32_t ModelConf::_internal_beam_size() const {
  return beam_size_;
}
inline int32_t ModelConf::beam_size() const {
  // @@protoc_insertion_point(field_get:ModelConf.beam_size)
  return _internal_beam_size();
}
inline void ModelConf::_internal_set_beam_size(int32_t value) {
  
  beam_size_ = value;
}
inline void ModelConf::set_beam_size(int32_t value) {
  _internal_set_beam_size(value);
  // @@protoc_insertion_point(field_set:ModelConf.beam_size)
}

// int32 extra_decode_length = 3;
inline void ModelConf::clear_extra_decode_length() {
  extra_decode_length_ = 0;
}
inline int32_t ModelConf::_internal_extra_decode_length() const {
  return extra_decode_length_;
}
inline int32_t ModelConf::extra_decode_length() const {
  // @@protoc_insertion_point(field_get:ModelConf.extra_decode_length)
  return _internal_extra_decode_length();
}
inline void ModelConf::_internal_set_extra_decode_length(int32_t value) {
  
  extra_decode_length_ = value;
}
inline void ModelConf::set_extra_decode_length(int32_t value) {
  _internal_set_extra_decode_length(value);
  // @@protoc_insertion_point(field_set:ModelConf.extra_decode_length)
}

// float length_penalty = 4;
inline void ModelConf::clear_length_penalty() {
  length_penalty_ = 0;
}
inline float ModelConf::_internal_length_penalty() const {
  return length_penalty_;
}
inline float ModelConf::length_penalty() const {
  // @@protoc_insertion_point(field_get:ModelConf.length_penalty)
  return _internal_length_penalty();
}
inline void ModelConf::_internal_set_length_penalty(float value) {
  
  length_penalty_ = value;
}
inline void ModelConf::set_length_penalty(float value) {
  _internal_set_length_penalty(value);
  // @@protoc_insertion_point(field_set:ModelConf.length_penalty)
}

// int32 src_padding_id = 5;
inline void ModelConf::clear_src_padding_id() {
  src_padding_id_ = 0;
}
inline int32_t ModelConf::_internal_src_padding_id() const {
  return src_padding_id_;
}
inline int32_t ModelConf::src_padding_id() const {
  // @@protoc_insertion_point(field_get:ModelConf.src_padding_id)
  return _internal_src_padding_id();
}
inline void ModelConf::_internal_set_src_padding_id(int32_t value) {
  
  src_padding_id_ = value;
}
inline void ModelConf::set_src_padding_id(int32_t value) {
  _internal_set_src_padding_id(value);
  // @@protoc_insertion_point(field_set:ModelConf.src_padding_id)
}

// int32 trg_start_id = 6;
inline void ModelConf::clear_trg_start_id() {
  trg_start_id_ = 0;
}
inline int32_t ModelConf::_internal_trg_start_id() const {
  return trg_start_id_;
}
inline int32_t ModelConf::trg_start_id() const {
  // @@protoc_insertion_point(field_get:ModelConf.trg_start_id)
  return _internal_trg_start_id();
}
inline void ModelConf::_internal_set_trg_start_id(int32_t value) {
  
  trg_start_id_ = value;
}
inline void ModelConf::set_trg_start_id(int32_t value) {
  _internal_set_trg_start_id(value);
  // @@protoc_insertion_point(field_set:ModelConf.trg_start_id)
}

// float diverse_lambda = 7;
inline void ModelConf::clear_diverse_lambda() {
  diverse_lambda_ = 0;
}
inline float ModelConf::_internal_diverse_lambda() const {
  return diverse_lambda_;
}
inline float ModelConf::diverse_lambda() const {
  // @@protoc_insertion_point(field_get:ModelConf.diverse_lambda)
  return _internal_diverse_lambda();
}
inline void ModelConf::_internal_set_diverse_lambda(float value) {
  
  diverse_lambda_ = value;
}
inline void ModelConf::set_diverse_lambda(float value) {
  _internal_set_diverse_lambda(value);
  // @@protoc_insertion_point(field_set:ModelConf.diverse_lambda)
}

// string sampling_method = 8;
inline void ModelConf::clear_sampling_method() {
  sampling_method_.ClearToEmpty();
}
inline const std::string& ModelConf::sampling_method() const {
  // @@protoc_insertion_point(field_get:ModelConf.sampling_method)
  return _internal_sampling_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelConf::set_sampling_method(ArgT0&& arg0, ArgT... args) {
 
 sampling_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ModelConf.sampling_method)
}
inline std::string* ModelConf::mutable_sampling_method() {
  std::string* _s = _internal_mutable_sampling_method();
  // @@protoc_insertion_point(field_mutable:ModelConf.sampling_method)
  return _s;
}
inline const std::string& ModelConf::_internal_sampling_method() const {
  return sampling_method_.Get();
}
inline void ModelConf::_internal_set_sampling_method(const std::string& value) {
  
  sampling_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelConf::_internal_mutable_sampling_method() {
  
  return sampling_method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelConf::release_sampling_method() {
  // @@protoc_insertion_point(field_release:ModelConf.sampling_method)
  return sampling_method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelConf::set_allocated_sampling_method(std::string* sampling_method) {
  if (sampling_method != nullptr) {
    
  } else {
    
  }
  sampling_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sampling_method,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sampling_method_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sampling_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ModelConf.sampling_method)
}

// float topp = 9;
inline void ModelConf::clear_topp() {
  topp_ = 0;
}
inline float ModelConf::_internal_topp() const {
  return topp_;
}
inline float ModelConf::topp() const {
  // @@protoc_insertion_point(field_get:ModelConf.topp)
  return _internal_topp();
}
inline void ModelConf::_internal_set_topp(float value) {
  
  topp_ = value;
}
inline void ModelConf::set_topp(float value) {
  _internal_set_topp(value);
  // @@protoc_insertion_point(field_set:ModelConf.topp)
}

// int32 topk = 10;
inline void ModelConf::clear_topk() {
  topk_ = 0;
}
inline int32_t ModelConf::_internal_topk() const {
  return topk_;
}
inline int32_t ModelConf::topk() const {
  // @@protoc_insertion_point(field_get:ModelConf.topk)
  return _internal_topk();
}
inline void ModelConf::_internal_set_topk(int32_t value) {
  
  topk_ = value;
}
inline void ModelConf::set_topk(int32_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:ModelConf.topk)
}

// int32 trg_end_id = 11;
inline void ModelConf::clear_trg_end_id() {
  trg_end_id_ = 0;
}
inline int32_t ModelConf::_internal_trg_end_id() const {
  return trg_end_id_;
}
inline int32_t ModelConf::trg_end_id() const {
  // @@protoc_insertion_point(field_get:ModelConf.trg_end_id)
  return _internal_trg_end_id();
}
inline void ModelConf::_internal_set_trg_end_id(int32_t value) {
  
  trg_end_id_ = value;
}
inline void ModelConf::set_trg_end_id(int32_t value) {
  _internal_set_trg_end_id(value);
  // @@protoc_insertion_point(field_set:ModelConf.trg_end_id)
}

// bool is_post_ln = 12;
inline void ModelConf::clear_is_post_ln() {
  is_post_ln_ = false;
}
inline bool ModelConf::_internal_is_post_ln() const {
  return is_post_ln_;
}
inline bool ModelConf::is_post_ln() const {
  // @@protoc_insertion_point(field_get:ModelConf.is_post_ln)
  return _internal_is_post_ln();
}
inline void ModelConf::_internal_set_is_post_ln(bool value) {
  
  is_post_ln_ = value;
}
inline void ModelConf::set_is_post_ln(bool value) {
  _internal_set_is_post_ln(value);
  // @@protoc_insertion_point(field_set:ModelConf.is_post_ln)
}

// bool no_scale_embedding = 13;
inline void ModelConf::clear_no_scale_embedding() {
  no_scale_embedding_ = false;
}
inline bool ModelConf::_internal_no_scale_embedding() const {
  return no_scale_embedding_;
}
inline bool ModelConf::no_scale_embedding() const {
  // @@protoc_insertion_point(field_get:ModelConf.no_scale_embedding)
  return _internal_no_scale_embedding();
}
inline void ModelConf::_internal_set_no_scale_embedding(bool value) {
  
  no_scale_embedding_ = value;
}
inline void ModelConf::set_no_scale_embedding(bool value) {
  _internal_set_no_scale_embedding(value);
  // @@protoc_insertion_point(field_set:ModelConf.no_scale_embedding)
}

// bool use_gelu = 14;
inline void ModelConf::clear_use_gelu() {
  use_gelu_ = false;
}
inline bool ModelConf::_internal_use_gelu() const {
  return use_gelu_;
}
inline bool ModelConf::use_gelu() const {
  // @@protoc_insertion_point(field_get:ModelConf.use_gelu)
  return _internal_use_gelu();
}
inline void ModelConf::_internal_set_use_gelu(bool value) {
  
  use_gelu_ = value;
}
inline void ModelConf::set_use_gelu(bool value) {
  _internal_set_use_gelu(value);
  // @@protoc_insertion_point(field_set:ModelConf.use_gelu)
}

// int32 multilg_type = 15;
inline void ModelConf::clear_multilg_type() {
  multilg_type_ = 0;
}
inline int32_t ModelConf::_internal_multilg_type() const {
  return multilg_type_;
}
inline int32_t ModelConf::multilg_type() const {
  // @@protoc_insertion_point(field_get:ModelConf.multilg_type)
  return _internal_multilg_type();
}
inline void ModelConf::_internal_set_multilg_type(int32_t value) {
  
  multilg_type_ = value;
}
inline void ModelConf::set_multilg_type(int32_t value) {
  _internal_set_multilg_type(value);
  // @@protoc_insertion_point(field_set:ModelConf.multilg_type)
}

// -------------------------------------------------------------------

// Transformer

// .EmbeddingLayer src_embedding = 1;
inline bool Transformer::_internal_has_src_embedding() const {
  return this != internal_default_instance() && src_embedding_ != nullptr;
}
inline bool Transformer::has_src_embedding() const {
  return _internal_has_src_embedding();
}
inline void Transformer::clear_src_embedding() {
  if (GetArenaForAllocation() == nullptr && src_embedding_ != nullptr) {
    delete src_embedding_;
  }
  src_embedding_ = nullptr;
}
inline const ::EmbeddingLayer& Transformer::_internal_src_embedding() const {
  const ::EmbeddingLayer* p = src_embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::EmbeddingLayer&>(
      ::_EmbeddingLayer_default_instance_);
}
inline const ::EmbeddingLayer& Transformer::src_embedding() const {
  // @@protoc_insertion_point(field_get:Transformer.src_embedding)
  return _internal_src_embedding();
}
inline void Transformer::unsafe_arena_set_allocated_src_embedding(
    ::EmbeddingLayer* src_embedding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_embedding_);
  }
  src_embedding_ = src_embedding;
  if (src_embedding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transformer.src_embedding)
}
inline ::EmbeddingLayer* Transformer::release_src_embedding() {
  
  ::EmbeddingLayer* temp = src_embedding_;
  src_embedding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EmbeddingLayer* Transformer::unsafe_arena_release_src_embedding() {
  // @@protoc_insertion_point(field_release:Transformer.src_embedding)
  
  ::EmbeddingLayer* temp = src_embedding_;
  src_embedding_ = nullptr;
  return temp;
}
inline ::EmbeddingLayer* Transformer::_internal_mutable_src_embedding() {
  
  if (src_embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::EmbeddingLayer>(GetArenaForAllocation());
    src_embedding_ = p;
  }
  return src_embedding_;
}
inline ::EmbeddingLayer* Transformer::mutable_src_embedding() {
  ::EmbeddingLayer* _msg = _internal_mutable_src_embedding();
  // @@protoc_insertion_point(field_mutable:Transformer.src_embedding)
  return _msg;
}
inline void Transformer::set_allocated_src_embedding(::EmbeddingLayer* src_embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete src_embedding_;
  }
  if (src_embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EmbeddingLayer>::GetOwningArena(src_embedding);
    if (message_arena != submessage_arena) {
      src_embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_embedding, submessage_arena);
    }
    
  } else {
    
  }
  src_embedding_ = src_embedding;
  // @@protoc_insertion_point(field_set_allocated:Transformer.src_embedding)
}

// repeated .EncoderLayer encoder_stack = 2;
inline int Transformer::_internal_encoder_stack_size() const {
  return encoder_stack_.size();
}
inline int Transformer::encoder_stack_size() const {
  return _internal_encoder_stack_size();
}
inline void Transformer::clear_encoder_stack() {
  encoder_stack_.Clear();
}
inline ::EncoderLayer* Transformer::mutable_encoder_stack(int index) {
  // @@protoc_insertion_point(field_mutable:Transformer.encoder_stack)
  return encoder_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EncoderLayer >*
Transformer::mutable_encoder_stack() {
  // @@protoc_insertion_point(field_mutable_list:Transformer.encoder_stack)
  return &encoder_stack_;
}
inline const ::EncoderLayer& Transformer::_internal_encoder_stack(int index) const {
  return encoder_stack_.Get(index);
}
inline const ::EncoderLayer& Transformer::encoder_stack(int index) const {
  // @@protoc_insertion_point(field_get:Transformer.encoder_stack)
  return _internal_encoder_stack(index);
}
inline ::EncoderLayer* Transformer::_internal_add_encoder_stack() {
  return encoder_stack_.Add();
}
inline ::EncoderLayer* Transformer::add_encoder_stack() {
  ::EncoderLayer* _add = _internal_add_encoder_stack();
  // @@protoc_insertion_point(field_add:Transformer.encoder_stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EncoderLayer >&
Transformer::encoder_stack() const {
  // @@protoc_insertion_point(field_list:Transformer.encoder_stack)
  return encoder_stack_;
}

// .EmbeddingLayer trg_embedding = 3;
inline bool Transformer::_internal_has_trg_embedding() const {
  return this != internal_default_instance() && trg_embedding_ != nullptr;
}
inline bool Transformer::has_trg_embedding() const {
  return _internal_has_trg_embedding();
}
inline void Transformer::clear_trg_embedding() {
  if (GetArenaForAllocation() == nullptr && trg_embedding_ != nullptr) {
    delete trg_embedding_;
  }
  trg_embedding_ = nullptr;
}
inline const ::EmbeddingLayer& Transformer::_internal_trg_embedding() const {
  const ::EmbeddingLayer* p = trg_embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::EmbeddingLayer&>(
      ::_EmbeddingLayer_default_instance_);
}
inline const ::EmbeddingLayer& Transformer::trg_embedding() const {
  // @@protoc_insertion_point(field_get:Transformer.trg_embedding)
  return _internal_trg_embedding();
}
inline void Transformer::unsafe_arena_set_allocated_trg_embedding(
    ::EmbeddingLayer* trg_embedding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trg_embedding_);
  }
  trg_embedding_ = trg_embedding;
  if (trg_embedding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transformer.trg_embedding)
}
inline ::EmbeddingLayer* Transformer::release_trg_embedding() {
  
  ::EmbeddingLayer* temp = trg_embedding_;
  trg_embedding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EmbeddingLayer* Transformer::unsafe_arena_release_trg_embedding() {
  // @@protoc_insertion_point(field_release:Transformer.trg_embedding)
  
  ::EmbeddingLayer* temp = trg_embedding_;
  trg_embedding_ = nullptr;
  return temp;
}
inline ::EmbeddingLayer* Transformer::_internal_mutable_trg_embedding() {
  
  if (trg_embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::EmbeddingLayer>(GetArenaForAllocation());
    trg_embedding_ = p;
  }
  return trg_embedding_;
}
inline ::EmbeddingLayer* Transformer::mutable_trg_embedding() {
  ::EmbeddingLayer* _msg = _internal_mutable_trg_embedding();
  // @@protoc_insertion_point(field_mutable:Transformer.trg_embedding)
  return _msg;
}
inline void Transformer::set_allocated_trg_embedding(::EmbeddingLayer* trg_embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trg_embedding_;
  }
  if (trg_embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EmbeddingLayer>::GetOwningArena(trg_embedding);
    if (message_arena != submessage_arena) {
      trg_embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trg_embedding, submessage_arena);
    }
    
  } else {
    
  }
  trg_embedding_ = trg_embedding;
  // @@protoc_insertion_point(field_set_allocated:Transformer.trg_embedding)
}

// repeated .DecoderLayer decoder_stack = 4;
inline int Transformer::_internal_decoder_stack_size() const {
  return decoder_stack_.size();
}
inline int Transformer::decoder_stack_size() const {
  return _internal_decoder_stack_size();
}
inline void Transformer::clear_decoder_stack() {
  decoder_stack_.Clear();
}
inline ::DecoderLayer* Transformer::mutable_decoder_stack(int index) {
  // @@protoc_insertion_point(field_mutable:Transformer.decoder_stack)
  return decoder_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DecoderLayer >*
Transformer::mutable_decoder_stack() {
  // @@protoc_insertion_point(field_mutable_list:Transformer.decoder_stack)
  return &decoder_stack_;
}
inline const ::DecoderLayer& Transformer::_internal_decoder_stack(int index) const {
  return decoder_stack_.Get(index);
}
inline const ::DecoderLayer& Transformer::decoder_stack(int index) const {
  // @@protoc_insertion_point(field_get:Transformer.decoder_stack)
  return _internal_decoder_stack(index);
}
inline ::DecoderLayer* Transformer::_internal_add_decoder_stack() {
  return decoder_stack_.Add();
}
inline ::DecoderLayer* Transformer::add_decoder_stack() {
  ::DecoderLayer* _add = _internal_add_decoder_stack();
  // @@protoc_insertion_point(field_add:Transformer.decoder_stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DecoderLayer >&
Transformer::decoder_stack() const {
  // @@protoc_insertion_point(field_list:Transformer.decoder_stack)
  return decoder_stack_;
}

// .ModelConf model_conf = 5;
inline bool Transformer::_internal_has_model_conf() const {
  return this != internal_default_instance() && model_conf_ != nullptr;
}
inline bool Transformer::has_model_conf() const {
  return _internal_has_model_conf();
}
inline void Transformer::clear_model_conf() {
  if (GetArenaForAllocation() == nullptr && model_conf_ != nullptr) {
    delete model_conf_;
  }
  model_conf_ = nullptr;
}
inline const ::ModelConf& Transformer::_internal_model_conf() const {
  const ::ModelConf* p = model_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::ModelConf&>(
      ::_ModelConf_default_instance_);
}
inline const ::ModelConf& Transformer::model_conf() const {
  // @@protoc_insertion_point(field_get:Transformer.model_conf)
  return _internal_model_conf();
}
inline void Transformer::unsafe_arena_set_allocated_model_conf(
    ::ModelConf* model_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_conf_);
  }
  model_conf_ = model_conf;
  if (model_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transformer.model_conf)
}
inline ::ModelConf* Transformer::release_model_conf() {
  
  ::ModelConf* temp = model_conf_;
  model_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ModelConf* Transformer::unsafe_arena_release_model_conf() {
  // @@protoc_insertion_point(field_release:Transformer.model_conf)
  
  ::ModelConf* temp = model_conf_;
  model_conf_ = nullptr;
  return temp;
}
inline ::ModelConf* Transformer::_internal_mutable_model_conf() {
  
  if (model_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::ModelConf>(GetArenaForAllocation());
    model_conf_ = p;
  }
  return model_conf_;
}
inline ::ModelConf* Transformer::mutable_model_conf() {
  ::ModelConf* _msg = _internal_mutable_model_conf();
  // @@protoc_insertion_point(field_mutable:Transformer.model_conf)
  return _msg;
}
inline void Transformer::set_allocated_model_conf(::ModelConf* model_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete model_conf_;
  }
  if (model_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ModelConf>::GetOwningArena(model_conf);
    if (message_arena != submessage_arena) {
      model_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_conf, submessage_arena);
    }
    
  } else {
    
  }
  model_conf_ = model_conf;
  // @@protoc_insertion_point(field_set_allocated:Transformer.model_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transformer_2eproto
