// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transformer.proto

#include "transformer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr EncoderLayer::EncoderLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multihead_norm_scale_()
  , multihead_norm_bias_()
  , multihead_project_kernel_qkv_()
  , multihead_project_bias_qkv_()
  , multihead_project_kernel_output_()
  , multihead_project_bias_output_()
  , ffn_norm_scale_()
  , ffn_norm_bias_()
  , ffn_first_kernel_()
  , ffn_first_bias_()
  , ffn_second_kernel_()
  , ffn_second_bias_(){}
struct EncoderLayerDefaultTypeInternal {
  constexpr EncoderLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncoderLayerDefaultTypeInternal() {}
  union {
    EncoderLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncoderLayerDefaultTypeInternal _EncoderLayer_default_instance_;
constexpr DecoderLayer::DecoderLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : self_norm_scale_()
  , self_norm_bias_()
  , self_project_kernel_qkv_()
  , self_project_bias_qkv_()
  , self_project_kernel_output_()
  , self_project_bias_output_()
  , encdec_norm_scale_()
  , encdec_norm_bias_()
  , encdec_project_kernel_q_()
  , encdec_project_bias_q_()
  , encdec_project_kernel_output_()
  , encdec_project_bias_output_()
  , ffn_norm_scale_()
  , ffn_norm_bias_()
  , ffn_first_kernel_()
  , ffn_first_bias_()
  , ffn_second_kernel_()
  , ffn_second_bias_(){}
struct DecoderLayerDefaultTypeInternal {
  constexpr DecoderLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecoderLayerDefaultTypeInternal() {}
  union {
    DecoderLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecoderLayerDefaultTypeInternal _DecoderLayer_default_instance_;
constexpr EmbeddingLayer::EmbeddingLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_embedding_()
  , position_embedding_()
  , norm_scale_()
  , norm_bias_()
  , encode_output_project_kernel_kv_()
  , encode_output_project_bias_kv_()
  , shared_bias_()
  , lang_emb_(){}
struct EmbeddingLayerDefaultTypeInternal {
  constexpr EmbeddingLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmbeddingLayerDefaultTypeInternal() {}
  union {
    EmbeddingLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmbeddingLayerDefaultTypeInternal _EmbeddingLayer_default_instance_;
constexpr ModelConf::ModelConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sampling_method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , head_num_(0)
  , beam_size_(0)
  , extra_decode_length_(0)
  , length_penalty_(0)
  , src_padding_id_(0)
  , trg_start_id_(0)
  , diverse_lambda_(0)
  , topp_(0)
  , topk_(0)
  , trg_end_id_(0)
  , is_post_ln_(false)
  , no_scale_embedding_(false)
  , use_gelu_(false)
  , multilg_type_(0){}
struct ModelConfDefaultTypeInternal {
  constexpr ModelConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelConfDefaultTypeInternal() {}
  union {
    ModelConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelConfDefaultTypeInternal _ModelConf_default_instance_;
constexpr Transformer::Transformer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoder_stack_()
  , decoder_stack_()
  , src_embedding_(nullptr)
  , trg_embedding_(nullptr)
  , model_conf_(nullptr){}
struct TransformerDefaultTypeInternal {
  constexpr TransformerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformerDefaultTypeInternal() {}
  union {
    Transformer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformerDefaultTypeInternal _Transformer_default_instance_;

// ===================================================================

class EncoderLayer::_Internal {
 public:
};

EncoderLayer::EncoderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  multihead_norm_scale_(arena),
  multihead_norm_bias_(arena),
  multihead_project_kernel_qkv_(arena),
  multihead_project_bias_qkv_(arena),
  multihead_project_kernel_output_(arena),
  multihead_project_bias_output_(arena),
  ffn_norm_scale_(arena),
  ffn_norm_bias_(arena),
  ffn_first_kernel_(arena),
  ffn_first_bias_(arena),
  ffn_second_kernel_(arena),
  ffn_second_bias_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EncoderLayer)
}
EncoderLayer::EncoderLayer(const EncoderLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      multihead_norm_scale_(from.multihead_norm_scale_),
      multihead_norm_bias_(from.multihead_norm_bias_),
      multihead_project_kernel_qkv_(from.multihead_project_kernel_qkv_),
      multihead_project_bias_qkv_(from.multihead_project_bias_qkv_),
      multihead_project_kernel_output_(from.multihead_project_kernel_output_),
      multihead_project_bias_output_(from.multihead_project_bias_output_),
      ffn_norm_scale_(from.ffn_norm_scale_),
      ffn_norm_bias_(from.ffn_norm_bias_),
      ffn_first_kernel_(from.ffn_first_kernel_),
      ffn_first_bias_(from.ffn_first_bias_),
      ffn_second_kernel_(from.ffn_second_kernel_),
      ffn_second_bias_(from.ffn_second_bias_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EncoderLayer)
}

inline void EncoderLayer::SharedCtor() {
}

EncoderLayer::~EncoderLayer() {
  // @@protoc_insertion_point(destructor:EncoderLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void EncoderLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EncoderLayer::ArenaDtor(void* object) {
  EncoderLayer* _this = reinterpret_cast< EncoderLayer* >(object);
  (void)_this;
}
void EncoderLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncoderLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncoderLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:EncoderLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multihead_norm_scale_.Clear();
  multihead_norm_bias_.Clear();
  multihead_project_kernel_qkv_.Clear();
  multihead_project_bias_qkv_.Clear();
  multihead_project_kernel_output_.Clear();
  multihead_project_bias_output_.Clear();
  ffn_norm_scale_.Clear();
  ffn_norm_bias_.Clear();
  ffn_first_kernel_.Clear();
  ffn_first_bias_.Clear();
  ffn_second_kernel_.Clear();
  ffn_second_bias_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncoderLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float multihead_norm_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_multihead_norm_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_multihead_norm_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float multihead_norm_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_multihead_norm_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_multihead_norm_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float multihead_project_kernel_qkv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_multihead_project_kernel_qkv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_multihead_project_kernel_qkv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float multihead_project_bias_qkv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_multihead_project_bias_qkv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_multihead_project_bias_qkv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float multihead_project_kernel_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_multihead_project_kernel_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_multihead_project_kernel_output(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float multihead_project_bias_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_multihead_project_bias_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_multihead_project_bias_output(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_norm_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_norm_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 61) {
          _internal_add_ffn_norm_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_norm_bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_norm_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 69) {
          _internal_add_ffn_norm_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_first_kernel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_first_kernel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_ffn_first_kernel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_first_bias = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_first_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_ffn_first_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_second_kernel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_second_kernel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 93) {
          _internal_add_ffn_second_kernel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_second_bias = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_second_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 101) {
          _internal_add_ffn_second_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncoderLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EncoderLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float multihead_norm_scale = 1;
  if (this->_internal_multihead_norm_scale_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_multihead_norm_scale(), target);
  }

  // repeated float multihead_norm_bias = 2;
  if (this->_internal_multihead_norm_bias_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_multihead_norm_bias(), target);
  }

  // repeated float multihead_project_kernel_qkv = 3;
  if (this->_internal_multihead_project_kernel_qkv_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_multihead_project_kernel_qkv(), target);
  }

  // repeated float multihead_project_bias_qkv = 4;
  if (this->_internal_multihead_project_bias_qkv_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_multihead_project_bias_qkv(), target);
  }

  // repeated float multihead_project_kernel_output = 5;
  if (this->_internal_multihead_project_kernel_output_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_multihead_project_kernel_output(), target);
  }

  // repeated float multihead_project_bias_output = 6;
  if (this->_internal_multihead_project_bias_output_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_multihead_project_bias_output(), target);
  }

  // repeated float ffn_norm_scale = 7;
  if (this->_internal_ffn_norm_scale_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_ffn_norm_scale(), target);
  }

  // repeated float ffn_norm_bias = 8;
  if (this->_internal_ffn_norm_bias_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_ffn_norm_bias(), target);
  }

  // repeated float ffn_first_kernel = 9;
  if (this->_internal_ffn_first_kernel_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_ffn_first_kernel(), target);
  }

  // repeated float ffn_first_bias = 10;
  if (this->_internal_ffn_first_bias_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_ffn_first_bias(), target);
  }

  // repeated float ffn_second_kernel = 11;
  if (this->_internal_ffn_second_kernel_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_ffn_second_kernel(), target);
  }

  // repeated float ffn_second_bias = 12;
  if (this->_internal_ffn_second_bias_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_ffn_second_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EncoderLayer)
  return target;
}

size_t EncoderLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EncoderLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float multihead_norm_scale = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_multihead_norm_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float multihead_norm_bias = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_multihead_norm_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float multihead_project_kernel_qkv = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_multihead_project_kernel_qkv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float multihead_project_bias_qkv = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_multihead_project_bias_qkv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float multihead_project_kernel_output = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_multihead_project_kernel_output_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float multihead_project_bias_output = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_multihead_project_bias_output_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_norm_scale = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_norm_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_norm_bias = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_norm_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_first_kernel = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_first_kernel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_first_bias = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_first_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_second_kernel = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_second_kernel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_second_bias = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_second_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncoderLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EncoderLayer*>(
      &from));
}

void EncoderLayer::MergeFrom(const EncoderLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EncoderLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  multihead_norm_scale_.MergeFrom(from.multihead_norm_scale_);
  multihead_norm_bias_.MergeFrom(from.multihead_norm_bias_);
  multihead_project_kernel_qkv_.MergeFrom(from.multihead_project_kernel_qkv_);
  multihead_project_bias_qkv_.MergeFrom(from.multihead_project_bias_qkv_);
  multihead_project_kernel_output_.MergeFrom(from.multihead_project_kernel_output_);
  multihead_project_bias_output_.MergeFrom(from.multihead_project_bias_output_);
  ffn_norm_scale_.MergeFrom(from.ffn_norm_scale_);
  ffn_norm_bias_.MergeFrom(from.ffn_norm_bias_);
  ffn_first_kernel_.MergeFrom(from.ffn_first_kernel_);
  ffn_first_bias_.MergeFrom(from.ffn_first_bias_);
  ffn_second_kernel_.MergeFrom(from.ffn_second_kernel_);
  ffn_second_bias_.MergeFrom(from.ffn_second_bias_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncoderLayer::CopyFrom(const EncoderLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EncoderLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderLayer::IsInitialized() const {
  return true;
}

void EncoderLayer::InternalSwap(EncoderLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  multihead_norm_scale_.InternalSwap(&other->multihead_norm_scale_);
  multihead_norm_bias_.InternalSwap(&other->multihead_norm_bias_);
  multihead_project_kernel_qkv_.InternalSwap(&other->multihead_project_kernel_qkv_);
  multihead_project_bias_qkv_.InternalSwap(&other->multihead_project_bias_qkv_);
  multihead_project_kernel_output_.InternalSwap(&other->multihead_project_kernel_output_);
  multihead_project_bias_output_.InternalSwap(&other->multihead_project_bias_output_);
  ffn_norm_scale_.InternalSwap(&other->ffn_norm_scale_);
  ffn_norm_bias_.InternalSwap(&other->ffn_norm_bias_);
  ffn_first_kernel_.InternalSwap(&other->ffn_first_kernel_);
  ffn_first_bias_.InternalSwap(&other->ffn_first_bias_);
  ffn_second_kernel_.InternalSwap(&other->ffn_second_kernel_);
  ffn_second_bias_.InternalSwap(&other->ffn_second_bias_);
}

std::string EncoderLayer::GetTypeName() const {
  return "EncoderLayer";
}


// ===================================================================

class DecoderLayer::_Internal {
 public:
};

DecoderLayer::DecoderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  self_norm_scale_(arena),
  self_norm_bias_(arena),
  self_project_kernel_qkv_(arena),
  self_project_bias_qkv_(arena),
  self_project_kernel_output_(arena),
  self_project_bias_output_(arena),
  encdec_norm_scale_(arena),
  encdec_norm_bias_(arena),
  encdec_project_kernel_q_(arena),
  encdec_project_bias_q_(arena),
  encdec_project_kernel_output_(arena),
  encdec_project_bias_output_(arena),
  ffn_norm_scale_(arena),
  ffn_norm_bias_(arena),
  ffn_first_kernel_(arena),
  ffn_first_bias_(arena),
  ffn_second_kernel_(arena),
  ffn_second_bias_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DecoderLayer)
}
DecoderLayer::DecoderLayer(const DecoderLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      self_norm_scale_(from.self_norm_scale_),
      self_norm_bias_(from.self_norm_bias_),
      self_project_kernel_qkv_(from.self_project_kernel_qkv_),
      self_project_bias_qkv_(from.self_project_bias_qkv_),
      self_project_kernel_output_(from.self_project_kernel_output_),
      self_project_bias_output_(from.self_project_bias_output_),
      encdec_norm_scale_(from.encdec_norm_scale_),
      encdec_norm_bias_(from.encdec_norm_bias_),
      encdec_project_kernel_q_(from.encdec_project_kernel_q_),
      encdec_project_bias_q_(from.encdec_project_bias_q_),
      encdec_project_kernel_output_(from.encdec_project_kernel_output_),
      encdec_project_bias_output_(from.encdec_project_bias_output_),
      ffn_norm_scale_(from.ffn_norm_scale_),
      ffn_norm_bias_(from.ffn_norm_bias_),
      ffn_first_kernel_(from.ffn_first_kernel_),
      ffn_first_bias_(from.ffn_first_bias_),
      ffn_second_kernel_(from.ffn_second_kernel_),
      ffn_second_bias_(from.ffn_second_bias_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DecoderLayer)
}

inline void DecoderLayer::SharedCtor() {
}

DecoderLayer::~DecoderLayer() {
  // @@protoc_insertion_point(destructor:DecoderLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DecoderLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecoderLayer::ArenaDtor(void* object) {
  DecoderLayer* _this = reinterpret_cast< DecoderLayer* >(object);
  (void)_this;
}
void DecoderLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecoderLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecoderLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:DecoderLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  self_norm_scale_.Clear();
  self_norm_bias_.Clear();
  self_project_kernel_qkv_.Clear();
  self_project_bias_qkv_.Clear();
  self_project_kernel_output_.Clear();
  self_project_bias_output_.Clear();
  encdec_norm_scale_.Clear();
  encdec_norm_bias_.Clear();
  encdec_project_kernel_q_.Clear();
  encdec_project_bias_q_.Clear();
  encdec_project_kernel_output_.Clear();
  encdec_project_bias_output_.Clear();
  ffn_norm_scale_.Clear();
  ffn_norm_bias_.Clear();
  ffn_first_kernel_.Clear();
  ffn_first_bias_.Clear();
  ffn_second_kernel_.Clear();
  ffn_second_bias_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DecoderLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float self_norm_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_self_norm_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_self_norm_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float self_norm_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_self_norm_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_self_norm_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float self_project_kernel_qkv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_self_project_kernel_qkv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_self_project_kernel_qkv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float self_project_bias_qkv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_self_project_bias_qkv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_self_project_bias_qkv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float self_project_kernel_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_self_project_kernel_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_self_project_kernel_output(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float self_project_bias_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_self_project_bias_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_self_project_bias_output(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encdec_norm_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encdec_norm_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 61) {
          _internal_add_encdec_norm_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encdec_norm_bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encdec_norm_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 69) {
          _internal_add_encdec_norm_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encdec_project_kernel_q = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encdec_project_kernel_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_encdec_project_kernel_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encdec_project_bias_q = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encdec_project_bias_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_encdec_project_bias_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encdec_project_kernel_output = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encdec_project_kernel_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 93) {
          _internal_add_encdec_project_kernel_output(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encdec_project_bias_output = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encdec_project_bias_output(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 101) {
          _internal_add_encdec_project_bias_output(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_norm_scale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_norm_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 109) {
          _internal_add_ffn_norm_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_norm_bias = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_norm_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 117) {
          _internal_add_ffn_norm_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_first_kernel = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_first_kernel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 125) {
          _internal_add_ffn_first_kernel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_first_bias = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_first_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 133) {
          _internal_add_ffn_first_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_second_kernel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_second_kernel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 141) {
          _internal_add_ffn_second_kernel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float ffn_second_bias = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ffn_second_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 149) {
          _internal_add_ffn_second_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecoderLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DecoderLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float self_norm_scale = 1;
  if (this->_internal_self_norm_scale_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_self_norm_scale(), target);
  }

  // repeated float self_norm_bias = 2;
  if (this->_internal_self_norm_bias_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_self_norm_bias(), target);
  }

  // repeated float self_project_kernel_qkv = 3;
  if (this->_internal_self_project_kernel_qkv_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_self_project_kernel_qkv(), target);
  }

  // repeated float self_project_bias_qkv = 4;
  if (this->_internal_self_project_bias_qkv_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_self_project_bias_qkv(), target);
  }

  // repeated float self_project_kernel_output = 5;
  if (this->_internal_self_project_kernel_output_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_self_project_kernel_output(), target);
  }

  // repeated float self_project_bias_output = 6;
  if (this->_internal_self_project_bias_output_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_self_project_bias_output(), target);
  }

  // repeated float encdec_norm_scale = 7;
  if (this->_internal_encdec_norm_scale_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_encdec_norm_scale(), target);
  }

  // repeated float encdec_norm_bias = 8;
  if (this->_internal_encdec_norm_bias_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_encdec_norm_bias(), target);
  }

  // repeated float encdec_project_kernel_q = 9;
  if (this->_internal_encdec_project_kernel_q_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_encdec_project_kernel_q(), target);
  }

  // repeated float encdec_project_bias_q = 10;
  if (this->_internal_encdec_project_bias_q_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_encdec_project_bias_q(), target);
  }

  // repeated float encdec_project_kernel_output = 11;
  if (this->_internal_encdec_project_kernel_output_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_encdec_project_kernel_output(), target);
  }

  // repeated float encdec_project_bias_output = 12;
  if (this->_internal_encdec_project_bias_output_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_encdec_project_bias_output(), target);
  }

  // repeated float ffn_norm_scale = 13;
  if (this->_internal_ffn_norm_scale_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_ffn_norm_scale(), target);
  }

  // repeated float ffn_norm_bias = 14;
  if (this->_internal_ffn_norm_bias_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_ffn_norm_bias(), target);
  }

  // repeated float ffn_first_kernel = 15;
  if (this->_internal_ffn_first_kernel_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_ffn_first_kernel(), target);
  }

  // repeated float ffn_first_bias = 16;
  if (this->_internal_ffn_first_bias_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_ffn_first_bias(), target);
  }

  // repeated float ffn_second_kernel = 17;
  if (this->_internal_ffn_second_kernel_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_ffn_second_kernel(), target);
  }

  // repeated float ffn_second_bias = 18;
  if (this->_internal_ffn_second_bias_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_ffn_second_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DecoderLayer)
  return target;
}

size_t DecoderLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DecoderLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float self_norm_scale = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_self_norm_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float self_norm_bias = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_self_norm_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float self_project_kernel_qkv = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_self_project_kernel_qkv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float self_project_bias_qkv = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_self_project_bias_qkv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float self_project_kernel_output = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_self_project_kernel_output_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float self_project_bias_output = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_self_project_bias_output_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encdec_norm_scale = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encdec_norm_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encdec_norm_bias = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encdec_norm_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encdec_project_kernel_q = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encdec_project_kernel_q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encdec_project_bias_q = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encdec_project_bias_q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encdec_project_kernel_output = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encdec_project_kernel_output_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encdec_project_bias_output = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encdec_project_bias_output_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_norm_scale = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_norm_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_norm_bias = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_norm_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_first_kernel = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_first_kernel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_first_bias = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_first_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_second_kernel = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_second_kernel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float ffn_second_bias = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ffn_second_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecoderLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DecoderLayer*>(
      &from));
}

void DecoderLayer::MergeFrom(const DecoderLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DecoderLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  self_norm_scale_.MergeFrom(from.self_norm_scale_);
  self_norm_bias_.MergeFrom(from.self_norm_bias_);
  self_project_kernel_qkv_.MergeFrom(from.self_project_kernel_qkv_);
  self_project_bias_qkv_.MergeFrom(from.self_project_bias_qkv_);
  self_project_kernel_output_.MergeFrom(from.self_project_kernel_output_);
  self_project_bias_output_.MergeFrom(from.self_project_bias_output_);
  encdec_norm_scale_.MergeFrom(from.encdec_norm_scale_);
  encdec_norm_bias_.MergeFrom(from.encdec_norm_bias_);
  encdec_project_kernel_q_.MergeFrom(from.encdec_project_kernel_q_);
  encdec_project_bias_q_.MergeFrom(from.encdec_project_bias_q_);
  encdec_project_kernel_output_.MergeFrom(from.encdec_project_kernel_output_);
  encdec_project_bias_output_.MergeFrom(from.encdec_project_bias_output_);
  ffn_norm_scale_.MergeFrom(from.ffn_norm_scale_);
  ffn_norm_bias_.MergeFrom(from.ffn_norm_bias_);
  ffn_first_kernel_.MergeFrom(from.ffn_first_kernel_);
  ffn_first_bias_.MergeFrom(from.ffn_first_bias_);
  ffn_second_kernel_.MergeFrom(from.ffn_second_kernel_);
  ffn_second_bias_.MergeFrom(from.ffn_second_bias_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DecoderLayer::CopyFrom(const DecoderLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DecoderLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecoderLayer::IsInitialized() const {
  return true;
}

void DecoderLayer::InternalSwap(DecoderLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  self_norm_scale_.InternalSwap(&other->self_norm_scale_);
  self_norm_bias_.InternalSwap(&other->self_norm_bias_);
  self_project_kernel_qkv_.InternalSwap(&other->self_project_kernel_qkv_);
  self_project_bias_qkv_.InternalSwap(&other->self_project_bias_qkv_);
  self_project_kernel_output_.InternalSwap(&other->self_project_kernel_output_);
  self_project_bias_output_.InternalSwap(&other->self_project_bias_output_);
  encdec_norm_scale_.InternalSwap(&other->encdec_norm_scale_);
  encdec_norm_bias_.InternalSwap(&other->encdec_norm_bias_);
  encdec_project_kernel_q_.InternalSwap(&other->encdec_project_kernel_q_);
  encdec_project_bias_q_.InternalSwap(&other->encdec_project_bias_q_);
  encdec_project_kernel_output_.InternalSwap(&other->encdec_project_kernel_output_);
  encdec_project_bias_output_.InternalSwap(&other->encdec_project_bias_output_);
  ffn_norm_scale_.InternalSwap(&other->ffn_norm_scale_);
  ffn_norm_bias_.InternalSwap(&other->ffn_norm_bias_);
  ffn_first_kernel_.InternalSwap(&other->ffn_first_kernel_);
  ffn_first_bias_.InternalSwap(&other->ffn_first_bias_);
  ffn_second_kernel_.InternalSwap(&other->ffn_second_kernel_);
  ffn_second_bias_.InternalSwap(&other->ffn_second_bias_);
}

std::string DecoderLayer::GetTypeName() const {
  return "DecoderLayer";
}


// ===================================================================

class EmbeddingLayer::_Internal {
 public:
};

EmbeddingLayer::EmbeddingLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  token_embedding_(arena),
  position_embedding_(arena),
  norm_scale_(arena),
  norm_bias_(arena),
  encode_output_project_kernel_kv_(arena),
  encode_output_project_bias_kv_(arena),
  shared_bias_(arena),
  lang_emb_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EmbeddingLayer)
}
EmbeddingLayer::EmbeddingLayer(const EmbeddingLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      token_embedding_(from.token_embedding_),
      position_embedding_(from.position_embedding_),
      norm_scale_(from.norm_scale_),
      norm_bias_(from.norm_bias_),
      encode_output_project_kernel_kv_(from.encode_output_project_kernel_kv_),
      encode_output_project_bias_kv_(from.encode_output_project_bias_kv_),
      shared_bias_(from.shared_bias_),
      lang_emb_(from.lang_emb_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EmbeddingLayer)
}

inline void EmbeddingLayer::SharedCtor() {
}

EmbeddingLayer::~EmbeddingLayer() {
  // @@protoc_insertion_point(destructor:EmbeddingLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void EmbeddingLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmbeddingLayer::ArenaDtor(void* object) {
  EmbeddingLayer* _this = reinterpret_cast< EmbeddingLayer* >(object);
  (void)_this;
}
void EmbeddingLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmbeddingLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmbeddingLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:EmbeddingLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_embedding_.Clear();
  position_embedding_.Clear();
  norm_scale_.Clear();
  norm_bias_.Clear();
  encode_output_project_kernel_kv_.Clear();
  encode_output_project_bias_kv_.Clear();
  shared_bias_.Clear();
  lang_emb_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EmbeddingLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float token_embedding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_token_embedding(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_token_embedding(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float position_embedding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position_embedding(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_position_embedding(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float norm_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_norm_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_norm_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float norm_bias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_norm_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_norm_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encode_output_project_kernel_kv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encode_output_project_kernel_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_encode_output_project_kernel_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float encode_output_project_bias_kv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_encode_output_project_bias_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_encode_output_project_bias_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float shared_bias = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_shared_bias(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 61) {
          _internal_add_shared_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float lang_emb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lang_emb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 69) {
          _internal_add_lang_emb(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmbeddingLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EmbeddingLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float token_embedding = 1;
  if (this->_internal_token_embedding_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_token_embedding(), target);
  }

  // repeated float position_embedding = 2;
  if (this->_internal_position_embedding_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position_embedding(), target);
  }

  // repeated float norm_scale = 3;
  if (this->_internal_norm_scale_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_norm_scale(), target);
  }

  // repeated float norm_bias = 4;
  if (this->_internal_norm_bias_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_norm_bias(), target);
  }

  // repeated float encode_output_project_kernel_kv = 5;
  if (this->_internal_encode_output_project_kernel_kv_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_encode_output_project_kernel_kv(), target);
  }

  // repeated float encode_output_project_bias_kv = 6;
  if (this->_internal_encode_output_project_bias_kv_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_encode_output_project_bias_kv(), target);
  }

  // repeated float shared_bias = 7;
  if (this->_internal_shared_bias_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_shared_bias(), target);
  }

  // repeated float lang_emb = 8;
  if (this->_internal_lang_emb_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_lang_emb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EmbeddingLayer)
  return target;
}

size_t EmbeddingLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EmbeddingLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float token_embedding = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_token_embedding_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float position_embedding = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_embedding_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float norm_scale = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_norm_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float norm_bias = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_norm_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encode_output_project_kernel_kv = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encode_output_project_kernel_kv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float encode_output_project_bias_kv = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_encode_output_project_bias_kv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float shared_bias = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_shared_bias_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float lang_emb = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lang_emb_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbeddingLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EmbeddingLayer*>(
      &from));
}

void EmbeddingLayer::MergeFrom(const EmbeddingLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EmbeddingLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  token_embedding_.MergeFrom(from.token_embedding_);
  position_embedding_.MergeFrom(from.position_embedding_);
  norm_scale_.MergeFrom(from.norm_scale_);
  norm_bias_.MergeFrom(from.norm_bias_);
  encode_output_project_kernel_kv_.MergeFrom(from.encode_output_project_kernel_kv_);
  encode_output_project_bias_kv_.MergeFrom(from.encode_output_project_bias_kv_);
  shared_bias_.MergeFrom(from.shared_bias_);
  lang_emb_.MergeFrom(from.lang_emb_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EmbeddingLayer::CopyFrom(const EmbeddingLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EmbeddingLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingLayer::IsInitialized() const {
  return true;
}

void EmbeddingLayer::InternalSwap(EmbeddingLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  token_embedding_.InternalSwap(&other->token_embedding_);
  position_embedding_.InternalSwap(&other->position_embedding_);
  norm_scale_.InternalSwap(&other->norm_scale_);
  norm_bias_.InternalSwap(&other->norm_bias_);
  encode_output_project_kernel_kv_.InternalSwap(&other->encode_output_project_kernel_kv_);
  encode_output_project_bias_kv_.InternalSwap(&other->encode_output_project_bias_kv_);
  shared_bias_.InternalSwap(&other->shared_bias_);
  lang_emb_.InternalSwap(&other->lang_emb_);
}

std::string EmbeddingLayer::GetTypeName() const {
  return "EmbeddingLayer";
}


// ===================================================================

class ModelConf::_Internal {
 public:
};

ModelConf::ModelConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ModelConf)
}
ModelConf::ModelConf(const ModelConf& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sampling_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sampling_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sampling_method().empty()) {
    sampling_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sampling_method(), 
      GetArenaForAllocation());
  }
  ::memcpy(&head_num_, &from.head_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&multilg_type_) -
    reinterpret_cast<char*>(&head_num_)) + sizeof(multilg_type_));
  // @@protoc_insertion_point(copy_constructor:ModelConf)
}

inline void ModelConf::SharedCtor() {
sampling_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sampling_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multilg_type_) -
    reinterpret_cast<char*>(&head_num_)) + sizeof(multilg_type_));
}

ModelConf::~ModelConf() {
  // @@protoc_insertion_point(destructor:ModelConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void ModelConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sampling_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelConf::ArenaDtor(void* object) {
  ModelConf* _this = reinterpret_cast< ModelConf* >(object);
  (void)_this;
}
void ModelConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelConf::Clear() {
// @@protoc_insertion_point(message_clear_start:ModelConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sampling_method_.ClearToEmpty();
  ::memset(&head_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multilg_type_) -
      reinterpret_cast<char*>(&head_num_)) + sizeof(multilg_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* ModelConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 head_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          head_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 beam_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          beam_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 extra_decode_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          extra_decode_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float length_penalty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          length_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 src_padding_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          src_padding_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trg_start_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          trg_start_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float diverse_lambda = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          diverse_lambda_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string sampling_method = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sampling_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float topp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          topp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 topk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trg_end_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          trg_end_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_post_ln = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          is_post_ln_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_scale_embedding = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          no_scale_embedding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_gelu = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          use_gelu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 multilg_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          multilg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 head_num = 1;
  if (this->_internal_head_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_head_num(), target);
  }

  // int32 beam_size = 2;
  if (this->_internal_beam_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beam_size(), target);
  }

  // int32 extra_decode_length = 3;
  if (this->_internal_extra_decode_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_extra_decode_length(), target);
  }

  // float length_penalty = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length_penalty = this->_internal_length_penalty();
  uint32_t raw_length_penalty;
  memcpy(&raw_length_penalty, &tmp_length_penalty, sizeof(tmp_length_penalty));
  if (raw_length_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_length_penalty(), target);
  }

  // int32 src_padding_id = 5;
  if (this->_internal_src_padding_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_src_padding_id(), target);
  }

  // int32 trg_start_id = 6;
  if (this->_internal_trg_start_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_trg_start_id(), target);
  }

  // float diverse_lambda = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diverse_lambda = this->_internal_diverse_lambda();
  uint32_t raw_diverse_lambda;
  memcpy(&raw_diverse_lambda, &tmp_diverse_lambda, sizeof(tmp_diverse_lambda));
  if (raw_diverse_lambda != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_diverse_lambda(), target);
  }

  // string sampling_method = 8;
  if (!this->_internal_sampling_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sampling_method().data(), static_cast<int>(this->_internal_sampling_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConf.sampling_method");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sampling_method(), target);
  }

  // float topp = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_topp = this->_internal_topp();
  uint32_t raw_topp;
  memcpy(&raw_topp, &tmp_topp, sizeof(tmp_topp));
  if (raw_topp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_topp(), target);
  }

  // int32 topk = 10;
  if (this->_internal_topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_topk(), target);
  }

  // int32 trg_end_id = 11;
  if (this->_internal_trg_end_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_trg_end_id(), target);
  }

  // bool is_post_ln = 12;
  if (this->_internal_is_post_ln() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_post_ln(), target);
  }

  // bool no_scale_embedding = 13;
  if (this->_internal_no_scale_embedding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_no_scale_embedding(), target);
  }

  // bool use_gelu = 14;
  if (this->_internal_use_gelu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_use_gelu(), target);
  }

  // int32 multilg_type = 15;
  if (this->_internal_multilg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_multilg_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelConf)
  return target;
}

size_t ModelConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModelConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sampling_method = 8;
  if (!this->_internal_sampling_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sampling_method());
  }

  // int32 head_num = 1;
  if (this->_internal_head_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_head_num());
  }

  // int32 beam_size = 2;
  if (this->_internal_beam_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_beam_size());
  }

  // int32 extra_decode_length = 3;
  if (this->_internal_extra_decode_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_extra_decode_length());
  }

  // float length_penalty = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length_penalty = this->_internal_length_penalty();
  uint32_t raw_length_penalty;
  memcpy(&raw_length_penalty, &tmp_length_penalty, sizeof(tmp_length_penalty));
  if (raw_length_penalty != 0) {
    total_size += 1 + 4;
  }

  // int32 src_padding_id = 5;
  if (this->_internal_src_padding_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_src_padding_id());
  }

  // int32 trg_start_id = 6;
  if (this->_internal_trg_start_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_trg_start_id());
  }

  // float diverse_lambda = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diverse_lambda = this->_internal_diverse_lambda();
  uint32_t raw_diverse_lambda;
  memcpy(&raw_diverse_lambda, &tmp_diverse_lambda, sizeof(tmp_diverse_lambda));
  if (raw_diverse_lambda != 0) {
    total_size += 1 + 4;
  }

  // float topp = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_topp = this->_internal_topp();
  uint32_t raw_topp;
  memcpy(&raw_topp, &tmp_topp, sizeof(tmp_topp));
  if (raw_topp != 0) {
    total_size += 1 + 4;
  }

  // int32 topk = 10;
  if (this->_internal_topk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_topk());
  }

  // int32 trg_end_id = 11;
  if (this->_internal_trg_end_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_trg_end_id());
  }

  // bool is_post_ln = 12;
  if (this->_internal_is_post_ln() != 0) {
    total_size += 1 + 1;
  }

  // bool no_scale_embedding = 13;
  if (this->_internal_no_scale_embedding() != 0) {
    total_size += 1 + 1;
  }

  // bool use_gelu = 14;
  if (this->_internal_use_gelu() != 0) {
    total_size += 1 + 1;
  }

  // int32 multilg_type = 15;
  if (this->_internal_multilg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_multilg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelConf::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ModelConf*>(
      &from));
}

void ModelConf::MergeFrom(const ModelConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModelConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sampling_method().empty()) {
    _internal_set_sampling_method(from._internal_sampling_method());
  }
  if (from._internal_head_num() != 0) {
    _internal_set_head_num(from._internal_head_num());
  }
  if (from._internal_beam_size() != 0) {
    _internal_set_beam_size(from._internal_beam_size());
  }
  if (from._internal_extra_decode_length() != 0) {
    _internal_set_extra_decode_length(from._internal_extra_decode_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length_penalty = from._internal_length_penalty();
  uint32_t raw_length_penalty;
  memcpy(&raw_length_penalty, &tmp_length_penalty, sizeof(tmp_length_penalty));
  if (raw_length_penalty != 0) {
    _internal_set_length_penalty(from._internal_length_penalty());
  }
  if (from._internal_src_padding_id() != 0) {
    _internal_set_src_padding_id(from._internal_src_padding_id());
  }
  if (from._internal_trg_start_id() != 0) {
    _internal_set_trg_start_id(from._internal_trg_start_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_diverse_lambda = from._internal_diverse_lambda();
  uint32_t raw_diverse_lambda;
  memcpy(&raw_diverse_lambda, &tmp_diverse_lambda, sizeof(tmp_diverse_lambda));
  if (raw_diverse_lambda != 0) {
    _internal_set_diverse_lambda(from._internal_diverse_lambda());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_topp = from._internal_topp();
  uint32_t raw_topp;
  memcpy(&raw_topp, &tmp_topp, sizeof(tmp_topp));
  if (raw_topp != 0) {
    _internal_set_topp(from._internal_topp());
  }
  if (from._internal_topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (from._internal_trg_end_id() != 0) {
    _internal_set_trg_end_id(from._internal_trg_end_id());
  }
  if (from._internal_is_post_ln() != 0) {
    _internal_set_is_post_ln(from._internal_is_post_ln());
  }
  if (from._internal_no_scale_embedding() != 0) {
    _internal_set_no_scale_embedding(from._internal_no_scale_embedding());
  }
  if (from._internal_use_gelu() != 0) {
    _internal_set_use_gelu(from._internal_use_gelu());
  }
  if (from._internal_multilg_type() != 0) {
    _internal_set_multilg_type(from._internal_multilg_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelConf::CopyFrom(const ModelConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModelConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConf::IsInitialized() const {
  return true;
}

void ModelConf::InternalSwap(ModelConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sampling_method_, lhs_arena,
      &other->sampling_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConf, multilg_type_)
      + sizeof(ModelConf::multilg_type_)
      - PROTOBUF_FIELD_OFFSET(ModelConf, head_num_)>(
          reinterpret_cast<char*>(&head_num_),
          reinterpret_cast<char*>(&other->head_num_));
}

std::string ModelConf::GetTypeName() const {
  return "ModelConf";
}


// ===================================================================

class Transformer::_Internal {
 public:
  static const ::EmbeddingLayer& src_embedding(const Transformer* msg);
  static const ::EmbeddingLayer& trg_embedding(const Transformer* msg);
  static const ::ModelConf& model_conf(const Transformer* msg);
};

const ::EmbeddingLayer&
Transformer::_Internal::src_embedding(const Transformer* msg) {
  return *msg->src_embedding_;
}
const ::EmbeddingLayer&
Transformer::_Internal::trg_embedding(const Transformer* msg) {
  return *msg->trg_embedding_;
}
const ::ModelConf&
Transformer::_Internal::model_conf(const Transformer* msg) {
  return *msg->model_conf_;
}
Transformer::Transformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  encoder_stack_(arena),
  decoder_stack_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Transformer)
}
Transformer::Transformer(const Transformer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      encoder_stack_(from.encoder_stack_),
      decoder_stack_(from.decoder_stack_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_src_embedding()) {
    src_embedding_ = new ::EmbeddingLayer(*from.src_embedding_);
  } else {
    src_embedding_ = nullptr;
  }
  if (from._internal_has_trg_embedding()) {
    trg_embedding_ = new ::EmbeddingLayer(*from.trg_embedding_);
  } else {
    trg_embedding_ = nullptr;
  }
  if (from._internal_has_model_conf()) {
    model_conf_ = new ::ModelConf(*from.model_conf_);
  } else {
    model_conf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Transformer)
}

inline void Transformer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_embedding_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_conf_) -
    reinterpret_cast<char*>(&src_embedding_)) + sizeof(model_conf_));
}

Transformer::~Transformer() {
  // @@protoc_insertion_point(destructor:Transformer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Transformer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete src_embedding_;
  if (this != internal_default_instance()) delete trg_embedding_;
  if (this != internal_default_instance()) delete model_conf_;
}

void Transformer::ArenaDtor(void* object) {
  Transformer* _this = reinterpret_cast< Transformer* >(object);
  (void)_this;
}
void Transformer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transformer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transformer::Clear() {
// @@protoc_insertion_point(message_clear_start:Transformer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoder_stack_.Clear();
  decoder_stack_.Clear();
  if (GetArenaForAllocation() == nullptr && src_embedding_ != nullptr) {
    delete src_embedding_;
  }
  src_embedding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trg_embedding_ != nullptr) {
    delete trg_embedding_;
  }
  trg_embedding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_conf_ != nullptr) {
    delete model_conf_;
  }
  model_conf_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Transformer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EmbeddingLayer src_embedding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_embedding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EncoderLayer encoder_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encoder_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .EmbeddingLayer trg_embedding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trg_embedding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DecoderLayer decoder_stack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decoder_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ModelConf model_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transformer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transformer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .EmbeddingLayer src_embedding = 1;
  if (this->_internal_has_src_embedding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src_embedding(this), target, stream);
  }

  // repeated .EncoderLayer encoder_stack = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encoder_stack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_encoder_stack(i), target, stream);
  }

  // .EmbeddingLayer trg_embedding = 3;
  if (this->_internal_has_trg_embedding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trg_embedding(this), target, stream);
  }

  // repeated .DecoderLayer decoder_stack = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_decoder_stack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_decoder_stack(i), target, stream);
  }

  // .ModelConf model_conf = 5;
  if (this->_internal_has_model_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::model_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transformer)
  return target;
}

size_t Transformer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transformer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EncoderLayer encoder_stack = 2;
  total_size += 1UL * this->_internal_encoder_stack_size();
  for (const auto& msg : this->encoder_stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DecoderLayer decoder_stack = 4;
  total_size += 1UL * this->_internal_decoder_stack_size();
  for (const auto& msg : this->decoder_stack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .EmbeddingLayer src_embedding = 1;
  if (this->_internal_has_src_embedding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_embedding_);
  }

  // .EmbeddingLayer trg_embedding = 3;
  if (this->_internal_has_trg_embedding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trg_embedding_);
  }

  // .ModelConf model_conf = 5;
  if (this->_internal_has_model_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_conf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transformer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transformer*>(
      &from));
}

void Transformer::MergeFrom(const Transformer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transformer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  encoder_stack_.MergeFrom(from.encoder_stack_);
  decoder_stack_.MergeFrom(from.decoder_stack_);
  if (from._internal_has_src_embedding()) {
    _internal_mutable_src_embedding()->::EmbeddingLayer::MergeFrom(from._internal_src_embedding());
  }
  if (from._internal_has_trg_embedding()) {
    _internal_mutable_trg_embedding()->::EmbeddingLayer::MergeFrom(from._internal_trg_embedding());
  }
  if (from._internal_has_model_conf()) {
    _internal_mutable_model_conf()->::ModelConf::MergeFrom(from._internal_model_conf());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transformer::CopyFrom(const Transformer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transformer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformer::IsInitialized() const {
  return true;
}

void Transformer::InternalSwap(Transformer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  encoder_stack_.InternalSwap(&other->encoder_stack_);
  decoder_stack_.InternalSwap(&other->decoder_stack_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transformer, model_conf_)
      + sizeof(Transformer::model_conf_)
      - PROTOBUF_FIELD_OFFSET(Transformer, src_embedding_)>(
          reinterpret_cast<char*>(&src_embedding_),
          reinterpret_cast<char*>(&other->src_embedding_));
}

std::string Transformer::GetTypeName() const {
  return "Transformer";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EncoderLayer* Arena::CreateMaybeMessage< ::EncoderLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EncoderLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::DecoderLayer* Arena::CreateMaybeMessage< ::DecoderLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DecoderLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::EmbeddingLayer* Arena::CreateMaybeMessage< ::EmbeddingLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EmbeddingLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ModelConf* Arena::CreateMaybeMessage< ::ModelConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModelConf >(arena);
}
template<> PROTOBUF_NOINLINE ::Transformer* Arena::CreateMaybeMessage< ::Transformer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Transformer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
